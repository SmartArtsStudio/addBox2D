{
    "project": {
        "name": "addBox2D",
        "version": "",
        "description": "addBox2D Documentation",
        "url": "https://github.com/SmartArtsStudio/addBox2D",
        "logo": "assets/addBox2D-logo-docs.png"
    },
    "files": {
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\JointsModule.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\JointsModule.js",
            "modules": {
                "Joints": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "modules": {},
            "classes": {
                "b2AreaJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "modules": {},
            "classes": {
                "b2AreaJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "modules": {},
            "classes": {
                "b2DistanceJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "modules": {},
            "classes": {
                "b2DistanceJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "modules": {},
            "classes": {
                "b2FrictionJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "modules": {},
            "classes": {
                "b2FrictionJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "modules": {},
            "classes": {
                "b2GearJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "modules": {},
            "classes": {
                "b2GearJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "modules": {},
            "classes": {
                "b2Jacobian": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "modules": {},
            "classes": {
                "b2Joint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "modules": {},
            "classes": {
                "b2JointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "modules": {},
            "classes": {
                "b2JointEdge": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js",
            "modules": {},
            "classes": {
                "b2JointFactory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "modules": {},
            "classes": {
                "b2MotorJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "modules": {},
            "classes": {
                "b2MotorJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "modules": {},
            "classes": {
                "b2MouseJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "modules": {},
            "classes": {
                "b2MouseJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "modules": {},
            "classes": {
                "b2PrismaticJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "modules": {},
            "classes": {
                "b2PrismaticJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "modules": {},
            "classes": {
                "b2PulleyJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "modules": {},
            "classes": {
                "b2PulleyJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "modules": {},
            "classes": {
                "b2RevoluteJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "modules": {},
            "classes": {
                "b2RevoluteJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "modules": {},
            "classes": {
                "b2RopeJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "modules": {},
            "classes": {
                "b2RopeJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "modules": {},
            "classes": {
                "b2WeldJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "modules": {},
            "classes": {
                "b2WeldJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "modules": {},
            "classes": {
                "b2WheelJoint": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "modules": {},
            "classes": {
                "b2WheelJointDef": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "modules": {
                "Dynamics": 1
            },
            "classes": {
                "b2Body": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js": {
            "name": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "modules": {},
            "classes": {
                "b2World": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Dynamics": {
            "name": "Dynamics",
            "submodules": {
                "Joints": 1
            },
            "classes": {
                "b2Body": 1,
                "b2World": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 17,
            "description": "A rigid body. These are created via\n<a href=../classes/b2World.html#method_createBody>b2World.createBody()</a>.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "bodyDef",
                    "description": "",
                    "type": "B2BodyDef"
                },
                {
                    "name": "world",
                    "description": "",
                    "type": "B2World"
                }
            ]
        },
        "Joints": {
            "name": "Joints",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "b2AreaJoint": 1,
                "b2AreaJointDef": 1,
                "b2DistanceJoint": 1,
                "b2DistanceJointDef": 1,
                "b2FrictionJoint": 1,
                "b2FrictionJointDef": 1,
                "b2GearJoint": 1,
                "b2GearJointDef": 1,
                "b2Jacobian": 1,
                "b2Joint": 1,
                "b2JointDef": 1,
                "b2JointEdge": 1,
                "b2JointFactory": 1,
                "b2MotorJoint": 1,
                "b2MotorJointDef": 1,
                "b2MouseJoint": 1,
                "b2MouseJointDef": 1,
                "b2PrismaticJoint": 1,
                "b2PrismaticJointDef": 1,
                "b2PulleyJoint": 1,
                "b2PulleyJointDef": 1,
                "b2RevoluteJoint": 1,
                "b2RevoluteJointDef": 1,
                "b2RopeJoint": 1,
                "b2RopeJointDef": 1,
                "b2WeldJoint": 1,
                "b2WeldJointDef": 1,
                "b2WheelJoint": 1,
                "b2WheelJointDef": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Dynamics",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 17,
            "description": "Manages the operation of joints and their interaction with bodies..",
            "tag": "main",
            "itemtype": "main"
        }
    },
    "classes": {
        "b2AreaJoint": {
            "name": "b2AreaJoint",
            "shortname": "b2AreaJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 17,
            "description": "Definition for a b2AreaJoint, which connects a\ngroup of bodies together so they maintain a constant area\nwithin them as the group distorts in reaction to collisions..",
            "is_constructor": 1,
            "extends": "{b2Joint}",
            "params": [
                {
                    "name": "areaJointDef",
                    "description": "",
                    "type": "B2AreaJointDef"
                }
            ]
        },
        "b2AreaJointDef": {
            "name": "b2AreaJointDef",
            "shortname": "b2AreaJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 17,
            "description": "Definitions for a b2AreaJoint which maintains the relationship between group of\nmoving bodies so that they maintain a constant volume (area in 2D) between them.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2DistanceJoint": {
            "name": "b2DistanceJoint",
            "shortname": "b2DistanceJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 17,
            "description": "A distance joint constrains two points on two bodies to\nremain at a fixed distance from each other. You can view this\nas a massless, rigid rod.",
            "is_constructor": 1,
            "extends": "{b2Joint}",
            "params": [
                {
                    "name": "distanceJointDef",
                    "description": "",
                    "type": "B2DistanceJointDef"
                }
            ]
        },
        "b2DistanceJointDef": {
            "name": "b2DistanceJointDef",
            "shortname": "b2DistanceJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 17,
            "description": "Distance joint definition. This requires defining an anchor\npoint on both bodies and the non-zero length of the distance\njoint. The definition uses local anchor points so that the\ninitial configuration can violate the constraint slightly.\nThis helps when saving and loading a game.\n\n Warning: Do not use a zero or short length.",
            "is_constructor": 1,
            "extends": "{b2Joint}"
        },
        "b2FrictionJoint": {
            "name": "b2FrictionJoint",
            "shortname": "b2FrictionJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 17,
            "description": "Friction joint. This is used for top-down friction. It\nprovides 2D translational friction and angular friction.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "frictionJointDef",
                    "description": "",
                    "type": "B2FrictionJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2FrictionJointDef": {
            "name": "b2FrictionJointDef",
            "shortname": "b2FrictionJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 17,
            "description": "Friction joint definition.\n\nClass constructor function",
            "is_constructor": 1
        },
        "b2GearJoint": {
            "name": "b2GearJoint",
            "shortname": "b2GearJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 17,
            "description": "A gear joint is used to connect two joints together. Either\njoint can be a revolute or prismatic joint. You specify a\ngear ratio to bind the motions together:\ncoordinateA + ratio * coordinateB = constant\nThe ratio can be negative or positive. If one joint is a\nrevolute joint and the other joint is a prismatic joint, then\nthe ratio will have units of length or units of 1/length.\nwarning You have to manually destroy the gear joint if jointA\nor jointB is destroyed.",
            "is_constructor": 1,
            "extends": "{b2Joint}",
            "params": [
                {
                    "name": "gearJointDef",
                    "description": "",
                    "type": "B2GearJointDef"
                }
            ]
        },
        "b2GearJointDef": {
            "name": "b2GearJointDef",
            "shortname": "b2GearJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 17,
            "description": "Gear joint definition. This definition requires two existing\nrevolute or prismatic joints (any combination will work).",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2Jacobian": {
            "name": "b2Jacobian",
            "shortname": "b2Jacobian",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 17,
            "is_constructor": 1
        },
        "b2Joint": {
            "name": "b2Joint",
            "shortname": "b2Joint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 17,
            "description": "Abstract base joint class.\n\nJoints are used to constraint two bodies together in various fashions.\nSome joints also feature limits and motors.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "jointDef",
                    "description": "",
                    "type": "B2JointDef"
                }
            ]
        },
        "b2JointDef": {
            "name": "b2JointDef",
            "shortname": "b2JointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 17,
            "description": "Joint definitions are used to construct joints.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Int=",
                    "optional": true,
                    "optdefault": "b2Joint.e_unknownJoint"
                }
            ]
        },
        "b2JointEdge": {
            "name": "b2JointEdge",
            "shortname": "b2JointEdge",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "line": 19,
            "description": "A joint edge is used to connect bodies and joints together\nin a joint graph where each body is a node and each joint\nis an edge. A joint edge belongs to a doubly linked list\nmaintained in each attached body. Each joint has two joint\nnodes, one for each attached body.",
            "is_constructor": 1
        },
        "b2JointFactory": {
            "name": "b2JointFactory",
            "shortname": "b2JointFactory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js",
            "line": 17,
            "static": 1,
            "is_constructor": 1
        },
        "b2MotorJoint": {
            "name": "b2MotorJoint",
            "shortname": "b2MotorJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 17,
            "description": "A motor joint is used to control the relative motion between\ntwo bodies. A typical usage is to control the movement of a\ndynamic body with respect to the ground.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "motorJointDef",
                    "description": "",
                    "type": "B2MotorJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2MotorJointDef": {
            "name": "b2MotorJointDef",
            "shortname": "b2MotorJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 17,
            "description": "Motor joint definition.",
            "is_constructor": 1,
            "extends": "b2JointDef"
        },
        "b2MouseJoint": {
            "name": "b2MouseJoint",
            "shortname": "b2MouseJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 17,
            "description": "A mouse joint is used to make a point on a body track a\nspecified world point. This a soft constraint with a maximum\nforce. This allows the constraint to stretch and without\napplying huge forces.\n\nNOTE: this joint is not documented in the manual because it\nwas developed to be used in the testbed. If you want to learn\nhow to use the mouse joint, look at the testbed.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mouseJointDef",
                    "description": "",
                    "type": "B2MouseJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2MouseJointDef": {
            "name": "b2MouseJointDef",
            "shortname": "b2MouseJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 17,
            "description": "Mouse joint definition. This requires a world target point,\ntuning parameters, and the time step.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2PrismaticJoint": {
            "name": "b2PrismaticJoint",
            "shortname": "b2PrismaticJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 17,
            "description": "A prismatic joint. This joint provides one degree of freedom:\ntranslation along an axis fixed in bodyA. Relative rotation\nis prevented. You can use a joint limit to restrict the range\nof motion and a joint motor to drive the motion or to model\njoint friction.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "prismaticJointDef",
                    "description": "",
                    "type": "B2PrismaticJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2PrismaticJointDef": {
            "name": "b2PrismaticJointDef",
            "shortname": "b2PrismaticJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 18,
            "description": "Prismatic joint definition. This requires defining a line of\nmotion using an axis and an anchor point. The definition uses\nlocal anchor points and a local axis so that the initial\nconfiguration can violate the constraint slightly. The joint\ntranslation is zero when the local anchor points coincide in\nworld space. Using local anchors and a local axis helps when\nsaving and loading a game.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2PulleyJoint": {
            "name": "b2PulleyJoint",
            "shortname": "b2PulleyJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 19,
            "description": "The pulley joint is connected to two bodies and two fixed ground points.\nThe pulley supports a ratio such that:\nlengthA + ratio * lengthB <= constant\nYes, the force transmitted is scaled by the ratio.\n\nWarning: the pulley joint can get a bit squirrelly by itself.\nThey often work better when combined with prismatic joints.\nYou should also cover the the anchor points with static\nshapes to prevent one side from going to zero length.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pulleyJointDef",
                    "description": "",
                    "type": "B2PulleyJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2PulleyJointDef": {
            "name": "b2PulleyJointDef",
            "shortname": "b2PulleyJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 19,
            "description": "Pulley joint definition. This requires two ground anchors,\ntwo dynamic body anchor points, and a pulley ratio.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2RevoluteJoint": {
            "name": "b2RevoluteJoint",
            "shortname": "b2RevoluteJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 18,
            "description": "A revolute joint constrains two bodies to share a common\npoint while they are free to rotate about the point. The\nrelative rotation about the shared point is the joint angle.\nYou can limit the relative rotation with a joint limit that\nspecifies a lower and upper angle. You can use a motor to\ndrive the relative rotation about the shared point. A maximum\nmotor torque is provided so that infinite forces are not\ngenerated.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "revoluteJointDef",
                    "description": "",
                    "type": "B2RevoluteJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2RevoluteJointDef": {
            "name": "b2RevoluteJointDef",
            "shortname": "b2RevoluteJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 18,
            "description": "Revolute joint definition. This requires defining an anchor\npoint where the bodies are joined. The definition uses local\nanchor points so that the initial configuration can violate\nthe constraint slightly. You also need to specify the initial\nrelative angle for joint limits. This helps when saving and\nloading a game.\n\nThe local anchor points are measured from the body's origin\nrather than the center of mass because:\n1. you might not know where the center of mass will be.\n2. if you add/remove shapes from a body and recompute the\nmass, the joints will be broken.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2RopeJoint": {
            "name": "b2RopeJoint",
            "shortname": "b2RopeJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 19,
            "description": "A rope joint enforces a maximum distance between two points on two bodies.\nIt has no other effect.\n\nWarning: if you attempt to change the maximum length during\nthe simulation you will get some non-physical behavior. A model that would allow you\nto dynamically modify the length would have some sponginess, so I chose not to\nimplement it that way. See b2DistanceJoint if you want to dynamically  control length.",
            "example": [
                " Limit:\n              C = norm(pB - pA) - L\n              u = (pB - pA) / norm(pB - pA)\n              Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n              J = [-u -cross(rA, u) u cross(rB, u)]\n              K = J * invM * JT\n                = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2"
            ],
            "is_constructor": 1,
            "extends": "{b2Joint}",
            "params": [
                {
                    "name": "ropeJointDef",
                    "description": "",
                    "type": "B2RopeJointDef"
                }
            ]
        },
        "b2RopeJointDef": {
            "name": "b2RopeJointDef",
            "shortname": "b2RopeJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 19,
            "description": "Rope joint definition. This requires two body anchor points and\na maximum lengths.\n\nNote: by default the connected objects will not collide.\nsee collideConnected in b2JointDef.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2WeldJoint": {
            "name": "b2WeldJoint",
            "shortname": "b2WeldJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 17,
            "description": "A weld joint essentially glues two bodies together. A weld\njoint may distort somewhat because the island constraint\nsolver is approximate.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "weldJointDef",
                    "description": "",
                    "type": "B2WeldJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2WeldJointDef": {
            "name": "b2WeldJointDef",
            "shortname": "b2WeldJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 17,
            "description": "Weld joint definition. You need to specify local anchor\npoints where they are attached and the relative body angle.\nThe position of the anchor points is important for computing\nthe reaction torque.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2WheelJoint": {
            "name": "b2WheelJoint",
            "shortname": "b2WheelJoint",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 17,
            "is_constructor": 1,
            "params": [
                {
                    "name": "wheelJointDef",
                    "description": "",
                    "type": "B2WheelJointDef"
                }
            ],
            "extends": "{b2Joint}"
        },
        "b2WheelJointDef": {
            "name": "b2WheelJointDef",
            "shortname": "b2WheelJointDef",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Joints",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 17,
            "description": "Wheel joint definition. This requires defining a line of\nmotion using an axis and an anchor point. The definition uses\nlocal anchor points and a local axis so that the initial\nconfiguration can violate the constraint slightly. The joint\ntranslation is zero when the local anchor points coincide in\nworld space. Using local anchors and a local axis helps when\nsaving and loading a game.",
            "is_constructor": 1,
            "extends": "{b2JointDef}"
        },
        "b2Body": {
            "name": "b2Body",
            "shortname": "b2Body",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dynamics",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 19,
            "description": "A rigid body. These are created via\n<a href=../classes/b2World.html#method_createBody>b2World.createBody()</a>."
        },
        "b2World": {
            "name": "b2World",
            "shortname": "b2World",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dynamics",
            "namespace": "",
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 17,
            "description": "The world class manages all physics entities, dynamic simulation,\nand asynchronous queries. The world also contains efficient memory\nmanagement facilities.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "gravity",
                    "description": "",
                    "type": "B2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                },
                {
                    "name": "allowSleep",
                    "description": "",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 31,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 56,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_delta",
            "type": "{b2Vec2}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 63,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_deltas",
            "type": "{Array.<b2Vec2>}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 70,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_joints",
            "type": "{Array.<b2Vec2>}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 77,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_normals",
            "type": "{Array.<b2Vec2>}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 85,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_targetLengths",
            "type": "{Array}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 95,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodies",
            "type": "{Array.<b2Body>}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 103,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_dampingRatio",
            "type": "{float}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 110,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 117,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 125,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_targetArea",
            "type": "{float}",
            "default": "0.0",
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 185,
            "description": "Get the reaction force given the inverse time step.\nUnit is Newtons.",
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "return": {
                "description": "",
                "type": "B2Vec2"
            },
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "out",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 200,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 214,
            "description": "Set frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFrequency",
            "params": [
                {
                    "name": "hz",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 229,
            "description": "Get frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFrequency",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 240,
            "description": "Set damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDampingRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 256,
            "description": "Get damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDampingRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 359,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 395,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js",
            "line": 457,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 28,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 49,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodies",
            "type": "{Array}",
            "default": "[]",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 58,
            "description": "The damping ratio. 0 = no damping, 1 = critical damping.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dampingRatio",
            "type": "{float}",
            "default": "0.0",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 68,
            "description": "The mass-spring-damper frequency in Hertz. A value of 0 disables softness.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "frequencyHz",
            "type": "{float}",
            "default": "0.0",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 78,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_areaJoint",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 87,
            "description": "The mass-spring-damper frequency in Hertz. A value of 0 disables softness.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "frequencyHz",
            "type": "{b2World}",
            "default": "null",
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js",
            "line": 125,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addBody",
            "params": [
                {
                    "name": "body",
                    "description": "",
                    "type": "B2Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2AreaJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 30,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 51,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 58,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 65,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 72,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 79,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_u",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 87,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 95,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 103,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 111,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 119,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 127,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 141,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_length",
            "type": "{float}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 149,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_dampingRatio",
            "type": "{float}",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 165,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{number}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 174,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gamma",
            "type": "{number}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 183,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bias",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 192,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 201,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 210,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 218,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 226,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 234,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 242,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 267,
            "description": "Object pool for memory management.",
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 288,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 299,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 310,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 323,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 336,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 351,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 364,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLength",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 373,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLength",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 383,
            "description": "Get frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getFrequency",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 394,
            "description": "Set frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFrequency",
            "params": [
                {
                    "name": "hz",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 407,
            "description": "Get damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDampingRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 418,
            "description": "Set damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDampingRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 430,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 542,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js",
            "line": 585,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 33,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 54,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 63,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 74,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_distanceJoint",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 82,
            "description": "The natural length between the anchor points.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "length",
            "type": "{float}",
            "default": "1.0",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 92,
            "description": "The mass-spring-damper frequency in Hertz. A value of 0\ndisables softness.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "frequencyHz",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 103,
            "description": "The damping ratio. 0 = no damping, 1 = critical damping.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dampingRatio",
            "type": "{float}",
            "default": "0.0",
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js",
            "line": 142,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor1",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "anchor2",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2DistanceJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 30,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 51,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 58,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 65,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearImpulse",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 72,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearMass",
            "type": "{b2Mat22}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 87,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 94,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 101,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 108,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 115,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 122,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 129,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 136,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat22}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 150,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxForce",
            "type": "{float}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxTorque",
            "type": "{float}",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 164,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularMass",
            "type": "{number}",
            "default": "0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 173,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 183,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 191,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 199,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 207,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 215,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 223,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 248,
            "description": "Object pool for memory management.",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 269,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 281,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 292,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 303,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 318,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 331,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 344,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 357,
            "description": "Set the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 369,
            "description": "Get the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 380,
            "description": "Set the maximum friction torque in N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 392,
            "description": "Get the maximum friction torque in N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxTorque",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 403,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 422,
            "description": "/**b2Vec2&*/var vA = data.velocities[this.m_indexA].v;\n/**float32*/var wA = data.velocities[this.m_indexA].w;\n\n//\t/*b2Vec2&*/ var cB = data.positions[this.m_indexB].c;\n/**float32*/var aB = data.positions[this.m_indexB].a;\n/**b2Vec2&*/var vB = data.velocities[this.m_indexB].v;\n/**float32*/var wB = data.velocities[this.m_indexB].w;\n\n//\t/*b2Rot*/ var qA = new b2Rot(aA), /*b2Rot*/ qB = new b2Rot(aB);\nvar qA = this.m_qA.setAngle( aA ), qB = this.m_qB.setAngle( aB );\n\n// Compute the effective mass matrix.\n//\tm_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\nb2Vec2.subtract( this.m_localAnchorA, this.m_localCenterA, this.m_lalcA );\nvar rA = b2Rot.timesV2( qA, this.m_lalcA, this.m_rA );\n//\tm_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\nb2Vec2.subtract( this.m_localAnchorB, this.m_localCenterB, this.m_lalcB );\nvar rB = b2Rot.timesV2( qB, this.m_lalcB, this.m_rB );\n\n// J = [-I -r1_skew I r2_skew]\n//     [ 0       -1 0       1]\n// r_skew = [-ry; rx]\n\n// Matlab\n// K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n//     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n//     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n/*float32*/var mA = this.m_invMassA, mB = this.m_invMassB;\n/*float32*/var iA = this.m_invIA, iB = this.m_invIB;\n\n/*b2Mat22*/var K = this.m_K; //new b2Mat22();\nK.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\nK.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\nK.ey.x = K.ex.y;\nK.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\nK.getInverse( this.m_linearMass );\n\nthis.m_angularMass = iA + iB;\nif ( this.m_angularMass > 0 ) {\n    this.m_angularMass = 1 / this.m_angularMass;\n}\n\nif ( data.step.warmStarting ) {\n    // Scale impulses to support a variable time step.\n    // m_linearImpulse *= data.step.dtRatio;\n    this.m_linearImpulse.times( data.step.dtRatio );\n    this.m_angularImpulse *= data.step.dtRatio;\n\n    // /*b2Vec2*/ var P(m_linearImpulse.x, m_linearImpulse.y);",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 497,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js",
            "line": 515,
            "description": "// Solve angular friction\n        {\n            /**float32*/var Cdot = wB - wA;\n            /**float32*/var impulse = (-this.m_angularMass * Cdot);\n    /**float32*/var oldImpulse = this.m_angularImpulse;\n            /**float32*/var maxImpulse = h * this.m_maxTorque;\n            this.m_angularImpulse = b2Math.clamp( this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse );\n            impulse = this.m_angularImpulse - oldImpulse;\n    wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n// Solve linear friction\n        {\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\n            Cdot = b2Vec2.subtract(\n                b2Vec2.vPlusCrossFV( vB, wB, this.m_rB, b2Vec2.POOL0 ),\n                b2Vec2.vPlusCrossFV( vA, wA, this.m_rA, b2Vec2.POOL1 ),\n                b2FrictionJoint._B2VEC2_POOL0 );\n    // b2Vec2 impulse = -b2Mul(m_linearMass, Cdot);\n            var impulseV = b2Mat22.timesV2( this.m_linearMass, Cdot, b2FrictionJoint._B2VEC2_POOL1 ).negative();\n            // b2Vec2 oldImpulse = m_linearImpulse;\n            var oldImpulseV = b2FrictionJoint._B2VEC2_POOL3.copy( this.m_linearImpulse );\n            // m_linearImpulse += impulse;\n            this.m_linearImpulse.plus( impulseV );\n    maxImpulse = h * this.m_maxForce;\n    if ( this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse ) {\n                this.m_linearImpulse.norm();\n                this.m_linearImpulse.times( maxImpulse );\n            }\n    // impulse = m_linearImpulse - oldImpulse;\n            b2Vec2.subtract( this.m_linearImpulse, oldImpulseV, impulseV );\n    // vA -= mA * impulse;\n            vA.minusEqualsMul( mA, impulseV );\n            // wA -= iA * b2Cross(m_rA, impulse);\n            wA -= iA * b2Vec2.cross( this.m_rA, impulseV );\n    // vB += mB * impulse;\n            vB.plusEqualsMul( mB, impulseV );\n            // wB += iB * b2Cross(m_rB, impulse);\n            wB += iB * b2Vec2.cross( this.m_rB, impulseV );\n        }\n        // data.velocities[this.m_indexA].v = vA;\n        data.velocities[this.m_indexA].w = wA;\n        // data.velocities[this.m_indexB].v = vB;\n        data.velocities[this.m_indexB].w = wB;\n    };",
            "class": "b2FrictionJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 27,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 48,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 57,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 68,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_frictionJoint",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 76,
            "description": "The maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxForce",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 86,
            "description": "The maximum friction torque in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxTorque",
            "type": "{float}",
            "default": "0.0",
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js",
            "line": 125,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2FrictionJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 37,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 60,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 67,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 74,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorC",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 81,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorD",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 88,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAxisC",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 95,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAxisD",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 102,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lcA",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 109,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lcB",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 116,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lcC",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 123,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lcD",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 130,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JvAC",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 137,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JvBD",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 144,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 151,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 158,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qC",
            "type": "{b2Rot}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 165,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qD",
            "type": "{b2Rot}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 172,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 179,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 186,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcC",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 193,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcD",
            "type": "{b2Vec2}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 203,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_referenceAngleA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 211,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_referenceAngleB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 219,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_referenceAngleB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 227,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 235,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 243,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexC",
            "type": "{int}",
            "default": "0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 251,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexD",
            "type": "{int}",
            "default": "0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 259,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mA",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 267,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mB",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 275,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mC",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 283,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mD",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 291,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_iA",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 299,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_iB",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 307,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_iB",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 315,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_iC",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 323,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_iD",
            "type": "{int}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 331,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JvAC",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 339,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JvBD",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 347,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JwA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 355,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JwB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 363,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JwC",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 371,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_JwD",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 379,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 387,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{b2Rot}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 395,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 403,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qC",
            "type": "{b2Rot}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 411,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qD",
            "type": "{b2Rot}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 419,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_joint1",
            "type": "{b2Joint}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 426,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_joint1",
            "type": "{b2Joint}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 433,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyA",
            "type": "{b2Body}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 441,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_ratio",
            "type": "{float}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 449,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{number}",
            "default": "0.0",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 460,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_typeA",
            "type": "{int}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 467,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_typeA",
            "type": "{int}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 474,
            "description": "Body A is connected to body C.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyC",
            "type": "{b2Body}",
            "default": "",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 484,
            "description": "Body A is connected to body C.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyA",
            "type": "{b2Body}",
            "default": "",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 494,
            "description": "Body B is connected to body D.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyD",
            "type": "{b2Body}",
            "default": "",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 504,
            "description": "Body B is connected to body D.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyB",
            "type": "{b2Body}",
            "default": "",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 524,
            "description": "/**float32*/var aA = this.m_bodyA.m_sweep.a;\n        /**b2Transform*/var xfC = this.m_bodyC.m_xf;\n/**float32*/var aC = this.m_bodyC.m_sweep.a;\n\n        if ( this.m_typeA === b2Joint.e_revoluteJoint ) {\n/**b2RevoluteJoint*/var revolute = gearJointDef.joint1;\nthis.m_localAnchorC.copy( revolute.m_localAnchorA );\nthis.m_localAnchorA.copy( revolute.m_localAnchorB );\nthis.m_referenceAngleA = revolute.m_referenceAngle;\nthis.m_localAxisC.setZero();\n\ncoordinateA = aA - aC - this.m_referenceAngleA;\n        }\n        else {\n/*b2PrismaticJoint*/var prismatic = gearJointDef.joint1;\nthis.m_localAnchorC.copy( prismatic.m_localAnchorA );\nthis.m_localAnchorA.copy( prismatic.m_localAnchorB );\nthis.m_referenceAngleA = prismatic.m_referenceAngle;\nthis.m_localAxisC.copy( prismatic.m_localXAxisA );\n\n// b2Vec2 pC = m_localAnchorC;\nvar pC = this.m_localAnchorC;\n// b2Vec2 pA = b2MulT(xfC.q, b2Mul(xfA.q, m_localAnchorA) + (xfA.p - xfC.p));\nvar pA = b2Rot.invRotV2(\n    xfC.q,\n    b2Vec2.add(\n        b2Rot.timesV2( xfA.q, this.m_localAnchorA, b2Vec2.POOL0 ),\n        b2Vec2.subtract( xfA.p, xfC.p, b2Vec2.POOL1 ),\n        b2Vec2.POOL0 ),\n    b2Vec2.POOL0 ); // pA uses s_t0\n//\t\tcoordinateA = b2Dot(pA - pC, m_localAxisC);\ncoordinateA = b2Vec2.dot( b2Vec2.subtract( pA, pC, b2Vec2.POOL0 ), this.m_localAxisC );\n        }\n\n        // Get geometry of joint2\n        /*b2Transform*/var xfB = this.m_bodyB.m_xf;\n/*float32*/var aB = this.m_bodyB.m_sweep.a;\n        /*b2Transform*/var xfD = this.m_bodyD.m_xf;\n/*float32*/var aD = this.m_bodyD.m_sweep.a;\n\n        if ( this.m_typeB === b2Joint.e_revoluteJoint ) {\n/*b2RevoluteJoint*/var revolute = gearJointDef.joint2;\nthis.m_localAnchorD.copy( revolute.m_localAnchorA );\nthis.m_localAnchorB.copy( revolute.m_localAnchorB );\nthis.m_referenceAngleB = revolute.m_referenceAngle;\nthis.m_localAxisD.setZero();\ncoordinateB = aB - aD - this.m_referenceAngleB;\n        }\n        else {\n/*b2PrismaticJoint*/var prismatic = gearJointDef.joint2;\nthis.m_localAnchorD.copy( prismatic.m_localAnchorA );\nthis.m_localAnchorB.copy( prismatic.m_localAnchorB );\nthis.m_referenceAngleB = prismatic.m_referenceAngle;\nthis.m_localAxisD.copy( prismatic.m_localXAxisA );\n\n// b2Vec2 pD = m_localAnchorD;\nvar pD = this.m_localAnchorD;\n// b2Vec2 pB = b2MulT(xfD.q, b2Mul(xfB.q, m_localAnchorB) + (xfB.p - xfD.p));\nvar pB = b2Rot.invRotV2(\n    xfD.q,\n    b2Vec2.add(\n        b2Rot.timesV2( xfB.q, this.m_localAnchorB, b2Vec2.POOL0 ),\n        b2Vec2.subtract( xfB.p, xfD.p, b2Vec2.POOL1 ),\n        b2Vec2.POOL0 ),\n    b2Vec2.POOL0 );\n// coordinateB = b2Dot(pB - pD, m_localAxisD);\ncoordinateB = b2Vec2.dot( b2Vec2.subtract( pB, pD, b2Vec2.POOL0 ), this.m_localAxisD );\n        }\n        this.m_ratio = gearJointDef.ratio;\n        this.m_constant = coordinateA + this.m_ratio * coordinateB;\n        this.m_impulse = 0;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n//                  ██       ██               ██  ██                                              //\n//                  ██       ██                   ██                                              //\n//                  ██ █████ █████ █████ ████ ██ █████ █████ █████ █████ █████                    //\n//                  ██ ██ ██ ██ ██ ██ ██ ██   ██  ██      ██ ██ ██ ██    ██ ██                    //\n//                  ██ ██ ██ ██ ██ █████ ██   ██  ██   █████ ██ ██ ██    █████                    //\n//                  ██ ██ ██ ██ ██ ██    ██   ██  ██   ██ ██ ██ ██ ██    ██                       //\n//                  ██ ██ ██ ██ ██ █████ ██   ██  ████ █████ ██ ██ █████ █████                    //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    } b2GearJoint.prototype = p = new b2Joint; Box2D.b2GearJoint = b2GearJoint;\n\n // STATIC CLASS PROPERTIES\n\n    /**\n     * Object pool for memory management.",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 636,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 662,
            "description": "/**b2Vec2&*/var vA = data.velocities[this.m_indexA].v;\n/**float32*/var wA = data.velocities[this.m_indexA].w;\n\n/**float32*/var aB = data.positions[this.m_indexB].a;\n/**b2Vec2&*/var vB = data.velocities[this.m_indexB].v;\n/**float32*/var wB = data.velocities[this.m_indexB].w;\n\n/**float32*/var aC = data.positions[this.m_indexC].a;\n/**b2Vec2&*/var vC = data.velocities[this.m_indexC].v;\n/**float32*/var wC = data.velocities[this.m_indexC].w;\n\n/**float32*/var aD = data.positions[this.m_indexD].a;\n/**b2Vec2&*/var vD = data.velocities[this.m_indexD].v;\n/**float32*/var wD = data.velocities[this.m_indexD].w;\n\n// b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\nvar qA = this.m_qA.setAngle( aA ),\n    qB = this.m_qB.setAngle( aB ),\n    qC = this.m_qC.setAngle( aC ),\n    qD = this.m_qD.setAngle( aD );\n\nthis.m_mass = 0;\n\nif ( this.m_typeA === b2Joint.e_revoluteJoint ) {\n    this.m_JvAC.setZero();\n    this.m_JwA = 1;\n    this.m_JwC = 1;\n    this.m_mass += this.m_iA + this.m_iC;\n}\nelse {\n    // b2Vec2 u = b2Mul(qC, m_localAxisC);\n    var u = b2Rot.timesV2( qC, this.m_localAxisC, b2GearJoint._B2VEC2_POOL1 );\n    // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\n    b2Vec2.subtract( this.m_localAnchorC, this.m_lcC, this.m_lalcC );\n    var rC = b2Rot.timesV2( qC, this.m_lalcC, b2GearJoint._B2VEC2_POOL2 );\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\n    b2Vec2.subtract( this.m_localAnchorA, this.m_lcA, this.m_lalcA );\n    var rA = b2Rot.timesV2( qA, this.m_lalcA, b2GearJoint._B2VEC2_POOL2 );\n    // m_JvAC = u;\n    this.m_JvAC.copy( u );\n    // m_JwC = b2Cross(rC, u);\n    this.m_JwC = b2Vec2.cross( rC, u );\n    // m_JwA = b2Cross(rA, u);\n    this.m_JwA = b2Vec2.cross( rA, u );\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n}\n\nif ( this.m_typeB === b2Joint.e_revoluteJoint ) {\n    this.m_JvBD.setZero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n}\nelse {\n    // b2Vec2 u = b2Mul(qD, m_localAxisD);\n    var u = b2Rot.timesV2( qD, this.m_localAxisD, b2GearJoint._B2VEC2_POOL3 );\n    // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\n    b2Vec2.subtract( this.m_localAnchorD, this.m_lcD, this.m_lalcD );\n    var rD = b2Rot.timesV2( qD, this.m_lalcD, b2GearJoint._B2VEC2_POOL4 );\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\n    b2Vec2.subtract( this.m_localAnchorB, this.m_lcB, this.m_lalcB );\n    var rB = b2Rot.timesV2( qB, this.m_lalcB, b2GearJoint._B2VEC2_POOL5 );\n    // m_JvBD = m_ratio * u;\n    b2Vec2.numTimes( this.m_ratio, u, this.m_JvBD );\n    // m_JwD = m_ratio * b2Cross(rD, u);\n    this.m_JwD = this.m_ratio * b2Vec2.cross( rD, u );\n    // m_JwB = m_ratio * b2Cross(rB, u);\n    this.m_JwB = this.m_ratio * b2Vec2.cross( rB, u );\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n}\n\n// Compute effective mass.\nthis.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\n\nif ( data.step.warmStarting ) {\n    // vA += (m_mA * m_impulse) * m_JvAC;\n    vA.plusEqualsMul( this.m_mA * this.m_impulse, this.m_JvAC );\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    // vB += (m_mB * m_impulse) * m_JvBD;\n    vB.plusEqualsMul( this.m_mB * this.m_impulse, this.m_JvBD );\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    // vC -= (m_mC * m_impulse) * m_JvAC;\n    vC.minusEqualsMul( this.m_mC * this.m_impulse, this.m_JvAC );\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n    // vD -= (m_mD * m_impulse) * m_JvBD;\n    vD.minusEqualsMul( this.m_mD * this.m_impulse, this.m_JvBD );\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n}\nelse {\n    this.m_impulse = 0;\n}\n// data.velocities[this.m_indexA].v = vA;\ndata.velocities[this.m_indexA].w = wA;\n// data.velocities[this.m_indexB].v = vB;\ndata.velocities[this.m_indexB].w = wB;\n// data.velocities[this.m_indexC].v = vC;\ndata.velocities[this.m_indexC].w = wC;\n// data.velocities[this.m_indexD].v = vD;\ndata.velocities[this.m_indexD].w = wD;\n    };\n\n    /**\n     *\n     * @public\n     * @override\n     * @method  solveVelocityConstraints\n     * @param   {b2SolverData} data\n     * @return  {void}",
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 815,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 952,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 963,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 974,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 989,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 1002,
            "description": "Get the first joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJoint1",
            "return": {
                "description": "",
                "type": "b2Joint"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 1013,
            "description": "Get the second joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJoint1",
            "return": {
                "description": "",
                "type": "b2Joint"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 1024,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js",
            "line": 1033,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2GearJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 28,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 49,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_gearJoint",
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 57,
            "description": "The first revolute/prismatic joint attached to the gear joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "joint1",
            "type": "{b2Joint|null}",
            "default": "null",
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 67,
            "description": "The second revolute/prismatic joint attached to the gear joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "joint2",
            "type": "{b2Joint|null}",
            "default": "null",
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 77,
            "description": "The gear ratio.",
            "see": [
                "b2GearJoint for explanation."
            ],
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "ratio",
            "type": "{float}",
            "default": "1.0",
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js",
            "line": 117,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2GearJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 40,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "linear",
            "type": "{b2Vec2}",
            "class": "b2Jacobian",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 47,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "angularA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Jacobian",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 55,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "angularB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Jacobian",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setZero",
            "return": {
                "description": "",
                "type": "B2Jacobian"
            },
            "chainable": 1,
            "class": "b2Jacobian",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Jacobian.js",
            "line": 93,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "angularA",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "angularB",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Jacobian"
            },
            "class": "b2Jacobian",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 51,
            "description": "A joint edge belongs to a doubly linked list\nmaintained in each attached body. Each joint has two joint\nnodes, one for each attached body.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_edgeA",
            "type": "{b2JointEdge}",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 62,
            "description": "A joint edge belongs to a doubly linked list\nmaintained in each attached body. Each joint has two joint\nnodes, one for each attached body.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_edgeB",
            "type": "{b2JointEdge}",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 75,
            "description": "Joint type:  distance, wheel (line), mouse, prismatic, pulley, revolute,\n             weld, friction, gear, rope, motor, and (constant) area.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_type",
            "type": "{int}",
            "default": "b2jointDef.type",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 86,
            "description": "Previous joint in the world's joint linked-list.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_prev",
            "type": "{b2Joint|null}",
            "default": "null",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 96,
            "description": "Next joint in the world's joint linked-list.\nMay be null if 'this' joint instance is the head of the linked-list.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_next",
            "type": "{b2Joint|null}",
            "default": "null",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 107,
            "description": "'this' joint instance's body A.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyA",
            "type": "{b2Body}",
            "default": "b2jointDef.bodyA",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 117,
            "description": "'this' joint instance's body B.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyB",
            "type": "{b2Body}",
            "default": "b2jointDef.bodyB",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 127,
            "description": "Will body A be able to collide with body B, or not?",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_collideConnected",
            "type": "{boolean}",
            "default": "b2jointDef.collideConnected",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 137,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_islandFlag",
            "type": "{boolean}",
            "default": "false",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 145,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_index",
            "type": "{int}",
            "default": "false",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 153,
            "description": "Application specific data.</br></br>\n\nNOTE: Using the\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      m_userData is managed for you extending either a\n      <a href=http://www.createjs.com/docs/easeljs/classes/Container.html>createjs.container</a>\n      or\n      <a href=http://www.createjs.com/docs/easeljs/classes/MovieClip.html>createjs.movieClip</a>\n      class.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_userData",
            "type": "{*}",
            "default": "b2jointDef.userData",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 209,
            "description": "Super class constructor function reference for sub classes.\n\n NOTE:   Explicit declaration to protect against sub-classes\n         inheriting a prototype.constructor value other than this.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "ParentClass",
            "type": "{constructor}",
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 235,
            "description": "Create a joint from a joint definition.",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "b2JointDef",
                    "description": "",
                    "type": "B2JointDef"
                },
                {
                    "name": "allocator",
                    "description": "",
                    "type": "B2JointDef"
                }
            ],
            "return": {
                "description": "b2Joint"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 248,
            "description": "Callback function called during World.step upon b2Joint destruction.\nOverride this method to define your joint destruction behaviour.\n\nNOTE: b2JointFactory.destroy(joint, allocator){  b2Joint.destroy(joint, allocator); }",
            "static": 1,
            "virtual": "",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "b2JointDef",
                    "description": "",
                    "type": "b2Joint"
                },
                {
                    "name": "allocator",
                    "description": "",
                    "type": "b2Joint"
                }
            ],
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 265,
            "description": "Get the type of the concrete joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 276,
            "description": "Get the first body attached to this joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getBodyA",
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 287,
            "description": "Get the second body attached to this joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getBodyB",
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 298,
            "description": "Get the anchor point on bodyA in world coordinates.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "getAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 311,
            "description": "Get the anchor point on bodyB in world coordinates.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 324,
            "description": "Get the reaction force on bodyB at the joint anchor in Newtons.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Vec2"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 338,
            "description": "Get the reaction torque on bodyB in N*m.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 350,
            "description": "Get the next joint in the world joint list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getNext",
            "return": {
                "description": "",
                "type": "b2Joint"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 361,
            "description": "Get the application specific user data reference.</br></br>\n\nNOTE: Using the\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      m_userData is managed for you extending either a\n      <a href=http://www.createjs.com/docs/easeljs/classes/Container.html>createjs.container</a>\n      or\n      <a href=http://www.createjs.com/docs/easeljs/classes/MovieClip.html>createjs.movieClip</a>\n      class.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getUserData",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 380,
            "description": "Set the application specific userdata reference.</br></br>\n\nNOTE: Using the\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      m_userData is managed for you extending either a\n      <a href=http://www.createjs.com/docs/easeljs/classes/Container.html>createjs.container</a>\n      or\n      <a href=http://www.createjs.com/docs/easeljs/classes/MovieClip.html>createjs.movieClip</a>\n      class.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setUserData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 399,
            "description": "Get collide connected.\n\nNote: modifying the collide connect flag won't work correctly\nbecause the flag is only checked when fixture AABBs begin to\noverlap.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getCollideConnected",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 414,
            "description": "Short-cut function to determine if either body is inactive.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 425,
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 434,
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 443,
            "description": "This returns true if the position errors are within tolerance.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js",
            "line": 456,
            "description": "Shift the origin for any points stored in world coordinates.",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "shiftOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Joint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 43,
            "description": "The joint type is set automatically for native joint types.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "class": "b2JointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 52,
            "description": "Application specific data.</br></br>\n\nNOTE: Using the\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      m_userData is managed for you extending either a\n      <a href=http://www.createjs.com/docs/easeljs/classes/Container.html>createjs.container</a>\n      or\n      <a href=http://www.createjs.com/docs/easeljs/classes/MovieClip.html>createjs.movieClip</a>\n      class.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "userData",
            "type": "{*|null}",
            "default": "null",
            "class": "b2JointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 70,
            "description": "The first attached body.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2JointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 80,
            "description": "The second attached body.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2JointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointDef.js",
            "line": 90,
            "description": "Set this flag to true if the attached bodies should collide.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "collideConnected",
            "type": "{boolean}",
            "default": "false",
            "class": "b2JointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "line": 32,
            "description": "Other body attached to edge.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "other",
            "type": "{b2Body}",
            "default": "null",
            "class": "b2JointEdge",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "line": 42,
            "description": "The joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "joint",
            "type": "{b2Joint}",
            "default": "null",
            "class": "b2JointEdge",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "line": 52,
            "description": "The previous joint edge in the body's joint list.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "prev",
            "type": "{b2JointEdge}",
            "default": "null",
            "class": "b2JointEdge",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointEdge.js",
            "line": 62,
            "description": "The next joint edge in the body's joint list.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "next",
            "type": "{b2JointEdge}",
            "default": "null",
            "class": "b2JointEdge",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js",
            "line": 25,
            "access": "public",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "jointDef",
                    "description": "",
                    "type": "B2JointDef"
                },
                {
                    "name": "allocator",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "b2Joint"
            },
            "class": "b2JointFactory",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js",
            "line": 118,
            "description": "Override this method to define your joint destruction behaviour.\n\nCallback function called during World.step upon b2Joint destruction.\nbody.destroyJoint(){ b2JointFactory.destroy() }",
            "access": "public",
            "tagname": "",
            "virtual": "",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "joint",
                    "description": "",
                    "type": "b2Joint"
                },
                {
                    "name": "allocator",
                    "description": "",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2JointFactory",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 31,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 52,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearOffset",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 59,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearImpulse",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 66,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 73,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 87,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 94,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 101,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 108,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearError",
            "type": "{b2Vec2}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 115,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearMass",
            "type": "{b2Mat22}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 122,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot|null}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 129,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot|null}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 136,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat22}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 146,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxForce",
            "type": "{float}",
            "default": "motorJointDef.maxForce.",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 154,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxTorque",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 161,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_correctionFactor",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 168,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_type",
            "type": "{int}",
            "default": "0.0",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 176,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 185,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularError",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 193,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularOffset",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 202,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 210,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorSpeed",
            "type": "{int}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 218,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2|null}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 225,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2|null}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 232,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 239,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 246,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIA",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 253,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 260,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularMass",
            "type": "{float}",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 283,
            "description": "Object pool for memory management.",
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 304,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 315,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 326,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 341,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 354,
            "description": "Set the position correction factor in the range [0,1].",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setCorrectionFactor",
            "params": [
                {
                    "name": "factor",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 370,
            "description": "Get the position correction factor in the range [0,1].",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getCorrectionFactor",
            "params": [
                {
                    "name": "factor",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 386,
            "description": "Set the target linear offset, in frame A, in meters.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLinearOffset",
            "params": [
                {
                    "name": "linearOffset",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 402,
            "description": "Get the target linear offset, in frame A, in meters.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearOffset",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 414,
            "description": "Set the target angular offset, in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAngularOffset",
            "params": [
                {
                    "name": "angularOffset",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 430,
            "description": "Get the target angular offset, in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAngularOffset",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 442,
            "description": "Set the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 458,
            "description": "Get the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 469,
            "description": "Set the maximum friction torque in N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 485,
            "description": "Get the maximum friction torque in N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 496,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 594,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js",
            "line": 678,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MotorJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 27,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 48,
            "description": "Position of bodyB minus the position of bodyA, in bodyA's\nframe, in meters.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "linearOffset",
            "type": "{b2Vec2}",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 60,
            "description": "The bodyB angle minus bodyA angle in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "angularOffset",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 70,
            "description": "The maximum motor force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAxisA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_motorJoint",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 88,
            "description": "The maximum motor torque in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxTorque",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 98,
            "description": "Position correction factor in the range [0,1].",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "correctionFactor",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 137,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js",
            "line": 150,
            "description": "/** @type {number} */ var angleB = this.bodyB.getAngle();\nthis.angularOffset = angleB - angleA;\n    };",
            "class": "b2MotorJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 35,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 56,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat22}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 64,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{b2Mat22}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 72,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_targetA",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 88,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 96,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 104,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 112,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_C",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 120,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 128,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 149,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxForce",
            "type": "{float}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 165,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_dampingRatio",
            "type": "{float}",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 173,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_beta",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 182,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gamma",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 191,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 200,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 209,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 218,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 244,
            "description": "Object pool for memory management.",
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 266,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 277,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 288,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 303,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 316,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setTarget",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 329,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTarget",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 340,
            "description": "Set the target angular offset, in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDampingRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 352,
            "description": "Get the target angular offset, in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDampingRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 363,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxForce",
            "params": [
                {
                    "name": "maxForce",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 373,
            "description": "Get the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxForce",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 384,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFrequency",
            "params": [
                {
                    "name": "hz",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 394,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getFrequency",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 403,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "shiftOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 414,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 501,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js",
            "line": 548,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2MouseJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 28,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 49,
            "description": "The initial world target point. This is assumed to coincide\nwith the body anchor initially.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "target",
            "type": "{b2Vec2}",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 61,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 69,
            "description": "The maximum constraint force that can be exerted to move the\ncandidate body. Usually you will express as some multiple of\nthe weight (multiplier * mass * gravity).",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxForce",
            "type": "{float}",
            "default": "0.0",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 81,
            "description": "The response speed.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "frequencyHz",
            "type": "{float}",
            "default": "5.0",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js",
            "line": 91,
            "description": "The damping ratio. 0 = no damping, 1 = critical damping.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dampingRatio",
            "type": "{number}",
            "default": "0.7",
            "class": "b2MouseJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 32,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 53,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 61,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 69,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localXAxisA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 77,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localYAxisA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 85,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{b2Vec3}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 93,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 101,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 109,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_axis",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 117,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_perp",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 125,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat33}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 133,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K2",
            "type": "{b2Mat22}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 141,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K3",
            "type": "{b2Mat33}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 149,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 165,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 173,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 181,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 189,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 205,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_refAngle",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 213,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lowerTranslation",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 221,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_upperTranslation",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 229,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxMotorForce",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 237,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorSpeed",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 245,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableLimit",
            "type": "{float}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 253,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableMotor",
            "type": "{boolean}",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 261,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorMass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 270,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 279,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_limitState",
            "type": "{int}",
            "default": "b2Joint.e_inactiveLimit",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 288,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_s1",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 297,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_s2",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 306,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_a1",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 315,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_a2",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 324,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 333,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 342,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 351,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 377,
            "description": "Object pool for memory management.",
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 403,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 414,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 426,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 443,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 456,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 469,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 482,
            "description": "The local joint axis relative to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointTranslation",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 499,
            "description": "The local joint axis relative to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAxisA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 512,
            "description": "The local joint axis relative to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReferenceAngle",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 523,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointSpeed",
            "return": {
                "description": "",
                "type": "B2Vec2"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 559,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isLimitEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 568,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "enableLimit",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 583,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLowerLimit",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 593,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getUpperLimit",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 603,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLimits",
            "params": [
                {
                    "name": "upper",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "lower",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 621,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isMotorEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 630,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "enableMotor",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 642,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMotorSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 655,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMotorSpeed",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 664,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxMotorForce",
            "params": [
                {
                    "name": "force",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 677,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxMotorForce",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 686,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxMotorForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 696,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 874,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js",
            "line": 1013,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 34,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 55,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 64,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 73,
            "description": "The local translation unit axis in bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAxisA",
            "type": "{b2Vec2}",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 86,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 94,
            "description": "The constrained angle between the bodies: bodyB_angle -\nbodyA_angle.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "referenceAngle",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 105,
            "description": "Enable/disable the joint limit.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "enableLimit",
            "type": "{boolean}",
            "default": "false",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 115,
            "description": "The lower translation limit, usually in meters.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "lowerTranslation",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 125,
            "description": "The upper translation limit, usually in meters.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "upperTranslation",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 135,
            "description": "Enable/disable the joint motor.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "enableMotor",
            "type": "{boolean}",
            "default": "false",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 145,
            "description": "The maximum motor torque, usually in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxMotorForce",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 155,
            "description": "The desired motor speed in radians per second.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "motorSpeed",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js",
            "line": 194,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PrismaticJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 38,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 59,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_groundAnchorA",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 67,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_groundAnchorB",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 75,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 83,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 91,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_uA",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 99,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_uB",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 107,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 115,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 123,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 131,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 139,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 147,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 155,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Rot}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 163,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Rot}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 182,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lengthA",
            "type": "{float}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 190,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lengthB",
            "type": "{float}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 200,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_ratio",
            "type": "{float}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 208,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_constant",
            "type": "{float}",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 216,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 225,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 234,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 243,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 252,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 261,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 270,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 279,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 307,
            "description": "Object pool for memory management.",
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 328,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 339,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 350,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getGroundAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 361,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getGroundAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 372,
            "description": "Get the current length of the segment attached to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLengthA",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 383,
            "description": "Get the current length of the segment attached to bodyB.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLengthB",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 394,
            "description": "Get the current length of the segment attached to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getCurrentLengthA",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 407,
            "description": "Get the current length of the segment attached to bodyB.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getCurrentLengthB",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 420,
            "description": "Get the pulley ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 431,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 446,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 459,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "shiftOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 471,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 571,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js",
            "line": 612,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PulleyJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 30,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 51,
            "description": "The first ground anchor in world coordinates. This point\nnever moves.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "groundAnchorA",
            "type": "{b2Vec2}",
            "default": "( -1, 1 )",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 62,
            "description": "The second ground anchor in world coordinates. This point\nnever moves.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "groundAnchorB",
            "type": "{b2Vec2}",
            "default": "( 1, 1 )",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 73,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "default": "( -1, 0 )",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 83,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "default": "( 1, 0 )",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 95,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "b2Joint.e_pulleyJoint",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 104,
            "description": "The a reference length for the segment attached to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "lengthA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 114,
            "description": "The a reference length for the segment attached to bodyB.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "lengthB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 124,
            "description": "The pulley ratio, used to simulate a block-and-tackle.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "ratio",
            "type": "{float}",
            "default": "1.0",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 134,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "collideConnected",
            "type": "{boolean}",
            "default": "true",
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js",
            "line": 171,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "groundA",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "groundB",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "anchorA",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "anchorB",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2PulleyJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 36,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 57,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 64,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 71,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 78,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 85,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat22}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 92,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 99,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 106,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 113,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 120,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 127,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 134,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{b2Vec3}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 141,
            "description": "Effective mass for point-to-point constraint.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{b2Mat33}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 156,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_referenceAngle",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 163,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 171,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lowerAngle",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 178,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_upperAngle",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 185,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxMotorTorque",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 192,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorSpeed",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 199,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableLimit",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 206,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableMotor",
            "type": "{float}",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 213,
            "description": "Effective mass for motor/limit angular constraint.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableMotor",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 223,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_limitState",
            "type": "{int}\ndefault    b2Joint.e_inactiveLimit",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 231,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}\ndefault    0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 239,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}\ndefault    0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 247,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 255,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 263,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 271,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 296,
            "description": "Object pool for memory management.",
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 322,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 333,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 344,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 359,
            "description": "Get the reaction torque due to the joint limit given the\ninverse time step. Unit is N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 372,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 385,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 398,
            "description": "Get the reference angle.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReferenceAngle",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 409,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointAngle",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 418,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointSpeed",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 427,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isMotorEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 436,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "enableMotor",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 450,
            "description": "Get the current motor torque given the inverse time step.\nUnit is N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMotorTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "B2Vec2|Object="
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 463,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMotorSpeed",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 472,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxMotorTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 482,
            "description": "Set the maximum friction force in N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxMotorTorque",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 493,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isLimitEnabled",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 502,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "enableLimit",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 517,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLowerLimit",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 526,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getUpperLimit",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 535,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLimits",
            "params": [
                {
                    "name": "lower",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "upper",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 550,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMotorSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 564,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 686,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js",
            "line": 811,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 39,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 60,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 69,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 87,
            "description": "The bodyB angle minus bodyA angle in the reference state\n(radians).",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "referenceAngle",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 98,
            "description": "A flag to enable joint limits.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "lowerAngle",
            "type": "{boolean}",
            "default": "false",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 108,
            "description": "A flag to enable the joint motor.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "enableMotor",
            "type": "{boolean}",
            "default": "false",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 118,
            "description": "The lower angle for the joint limit (radians).",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "lowerAngle",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 128,
            "description": "The upper angle for the joint limit (radians).",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "upperAngle",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 138,
            "description": "The maximum motor torque used to achieve the desired motor\nspeed. Usually in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxMotorTorque",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 149,
            "description": "The desired motor speed. Usually in radians per second.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "motorSpeed",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js",
            "line": 188,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RevoluteJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 45,
            "description": "Invoke parent class constructor function reference.",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 66,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "default": "{b2ropeDef.localAnchorB}  (0,0)",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 75,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "default": "{b2ropeDef.localAnchorB}  (0,0)",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 84,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 92,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 100,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_u",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 108,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 116,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 123,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 130,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 137,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 144,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 151,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 163,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxLength",
            "type": "{float}",
            "default": "{b2ropeDef.maxLength}   0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 172,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "default": "{b2ropeDef.frequencyHz}   0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 181,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bias",
            "type": "{float}",
            "default": "(0,0)",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 190,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gamma",
            "type": "{float}",
            "default": "(0,0)",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 199,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 208,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "m_state",
            "type": "{float}",
            "default": "b2Joint.e_inactiveLimit",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 217,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_length",
            "type": "{float}",
            "default": "{b2ropeDef.length}    1.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 226,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 235,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxLength",
            "type": "{float}",
            "default": "0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 244,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 253,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 262,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_state",
            "type": "{int}",
            "default": "b2Joint.e_inactiveLimit",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 271,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{int}",
            "default": "0.0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 280,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{int}",
            "default": "0",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 306,
            "description": "Object pool for memory management.",
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 327,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 338,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 349,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 364,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 377,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 390,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 403,
            "description": "Set the maximum length of the rope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxLength",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 415,
            "description": "Get the maximum length of the rope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxLength",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 426,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLimitState",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 435,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 524,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js",
            "line": 570,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RopeJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 33,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 54,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "default": "(-1, 0)",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 64,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "default": "(1, 0)",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 76,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 85,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 94,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "default": "{b2RopeJoint}    b2RopeJoint",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 121,
            "description": "The maximum length of the rope.\n\nWarning: this must be larger than b2Settings.b2_linearSlop or the\njoint will have no effect.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxLength",
            "type": "{number}",
            "default": "0.0",
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js",
            "line": 163,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchorA",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "anchorB",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2RopeJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 30,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 51,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 58,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 65,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{b2Vec3}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 73,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{b2Mat33}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 81,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 88,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 95,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 102,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 109,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 116,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 123,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 130,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 137,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_K",
            "type": "{b2Mat33}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 150,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 157,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_dampingRatio",
            "type": "{float}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 164,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_referenceAngle",
            "type": "{float}",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 171,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bias",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 179,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gamma",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 189,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 197,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 205,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 213,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 221,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 229,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 254,
            "description": "Object pool for memory management.",
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 278,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 289,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 300,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 315,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 328,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 341,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 354,
            "description": "Get the reference angle.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReferenceAngle",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 365,
            "description": "Set frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFrequency",
            "params": [
                {
                    "name": "hz",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 377,
            "description": "Get frequency in Hz.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReferenceAngle",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 388,
            "description": "Set damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDampingRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 400,
            "description": "Get damping ratio.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDampingRatio",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 411,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 531,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js",
            "line": 613,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solvePositionConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 30,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 51,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 60,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 71,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}   b2WeldJoint",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 78,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyA",
            "type": "{b2Body|null}",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 85,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "bodyB",
            "type": "{b2Body|null}",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 92,
            "description": "The bodyB angle minus bodyA angle in the reference state\n(radians).",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "referenceAngle",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 103,
            "description": "The mass-spring-damper frequency in Hertz. Rotation only.\nDisable softness with a value of 0.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "frequencyHz",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 114,
            "description": "The damping ratio. 0 = no damping, 1 = critical damping.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dampingRatio",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js",
            "line": 153,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WeldJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 27,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 48,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 56,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 64,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localXAxisA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 72,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localYAxisA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 80,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 88,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_localCenterB",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 96,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_ax",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 104,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_ay",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 112,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qA",
            "type": "{b2Rot}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 120,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_qB",
            "type": "{b2Rot}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 128,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 136,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_lalcB",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 144,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rA",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 152,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_rB",
            "type": "{b2Vec2}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 170,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_dampingRatio",
            "type": "{float}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 178,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_frequencyHz",
            "type": "{float}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 186,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_maxMotorForce",
            "type": "{float}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 194,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorSpeed",
            "type": "{float}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 202,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableLimit",
            "type": "{boolean}",
            "default": "false",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 211,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_enableMotor",
            "type": "{boolean}",
            "default": "false",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 220,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_limitState",
            "type": "{int}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 228,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorMass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 237,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_impulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 246,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_motorImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 255,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_springImpulse",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 266,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexA",
            "type": "{int}",
            "default": "0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 275,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_indexB",
            "type": "{int}",
            "default": "0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 284,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 293,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMassB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 302,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIA",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 311,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invIB",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 320,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sAx",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 329,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sBx",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 338,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sAy",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 347,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sBy",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 356,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 365,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_springMass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 374,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bias",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 383,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gamma",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 409,
            "description": "Object pool for memory management.",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 431,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 442,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 453,
            "description": "Get the reaction force given the inverse time step.\nUnit is N.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionForce",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                },
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 470,
            "description": "Get the reaction torque given the inverse time step.\nUnit is N*m. This is always zero for a distance joint.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getReactionTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 483,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorA",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 496,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAnchorB",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 509,
            "description": "The local joint axis relative to bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalAxisA",
            "params": [
                {
                    "name": "out",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 522,
            "description": "Get the position correction factor in the range [0,1].",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointTranslation",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 530,
            "description": "/**b2Body*/ var bB = this.m_bodyB;\n/**b2Vec2*/ var pA = bA.getWorldPoint(this.m_localAnchorA, b2WheelJoint._B2VEC2_POOL0);\n/**b2Vec2*/ var pB = bB.getWorldPoint(this.m_localAnchorB, b2WheelJoint._B2VEC2_POOL1);\n/**b2Vec2*/ var d = b2Vec2.subtract(pB, pA, b2WheelJoint._B2VEC2_POOL2);\n/**b2Vec2*/ var axis = bA.getWorldVector(this.m_localXAxisA, b2WheelJoint._B2VEC2_POOL3);\n/**float32*/var translation = b2Vec2.dot(d, axis);\nreturn translation;\n    };\n\n    /**\n     * @public\n     * @method  getJointSpeed\n     * @return  {float}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 551,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearOffset",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 560,
            "description": "Set the target angular offset, in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "enableMotor",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 574,
            "description": "Set the motor speed, usually in radians per second.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMotorSpeed",
            "params": [
                {
                    "name": "speed",
                    "description": "",
                    "type": "B2Vec2|Object="
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 588,
            "description": "Set the maximum motor force, usually in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMaxMotorTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 602,
            "description": "Get the current motor torque given the inverse time step,\nusually in N-m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMotorTorque",
            "params": [
                {
                    "name": "invDeltaTime",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 615,
            "description": "Get the motor speed, usually in radians per second.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMotorSpeed",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 626,
            "description": "Get the maximum friction torque in N*m.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMaxMotorTorque",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 637,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setSpringFrequencyHz",
            "params": [
                {
                    "name": "hz",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 647,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getSpringFrequencyHz",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 656,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setSpringDampingRatio",
            "params": [
                {
                    "name": "ratio",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 666,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getSpringFrequencyHz",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 675,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "initVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 832,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "solveVelocityConstraints",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "B2SolverData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js",
            "line": 852,
            "description": "/**float*/ var impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\nthis.m_springImpulse += impulse;\n\n// b2Vec2 P = impulse * m_ax;\n/**b2Vec2*/var P = b2Vec2.numTimes(impulse, this.m_ax, b2WheelJoint._B2VEC2_POOL0);\n/**float*/var LA = impulse * this.m_sAx;\n/**float*/var LB = impulse * this.m_sBx;\n\n// vA -= mA * P;\nvA.minusEqualsMul(mA, P);\nwA -= iA * LA;\n\n// vB += mB * P;\nvB.plusEqualsMul(mB, P);\nwB += iB * LB;\n        }\n\n// Solve rotational motor constraint\n        {\nCdot = wB - wA - this.m_motorSpeed;\nimpulse = -this.m_motorMass * Cdot;\n\n/**float*/ var oldImpulse = this.m_motorImpulse;\n/**float*/ var maxImpulse = data.step.dt * this.m_maxMotorTorque;\nthis.m_motorImpulse = b2Math.clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\nimpulse = this.m_motorImpulse - oldImpulse;\n\nwA -= iA * impulse;\nwB += iB * impulse;\n        }\n\n        // Solve point to line constraint\n        {\nCdot = b2Vec2.dot(this.m_ay, b2Vec2.subtract(vB, vA, b2Vec2.POOL0)) + this.m_sBy * wB - this.m_sAy * wA;\nimpulse = -this.m_mass * Cdot;\nthis.m_impulse += impulse;\n\n// b2Vec2 P = impulse * m_ay;\nP = b2Vec2.numTimes(impulse, this.m_ay, b2WheelJoint._B2VEC2_POOL0);\nLA = impulse * this.m_sAy;\nLB = impulse * this.m_sBy;\n\n// vA -= mA * P;\nvA.minusEqualsMul(mA, P);\nwA -= iA * LA;\n\n// vB += mB * P;\nvB.plusEqualsMul(mB, P);\nwB += iB * LB;\n        }\n\n        // data.velocities[this.m_indexA].v = vA;\n        data.velocities[this.m_indexA].w = wA;\n        // data.velocities[this.m_indexB].v = vB;\n        data.velocities[this.m_indexB].w = wB;\n    };\n\n    /**\n     * @public\n     * @override\n     * @method  solvePositionConstraints\n     * @param   {b2SolverData} data\n     * @return  {void}",
            "class": "b2WheelJoint",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 33,
            "description": "Invokes parent class constructor function reference.",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 54,
            "description": "The local anchor point relative to bodyA's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorA",
            "type": "{b2Vec2}",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 63,
            "description": "The local anchor point relative to bodyB's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAnchorB",
            "type": "{b2Vec2}",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 72,
            "description": "The local translation axis in bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAxisA",
            "type": "{b2Vec2}",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 81,
            "description": "The local translation axis in bodyA.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "localAxisA",
            "type": "{b2Vec2}",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 94,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "type",
            "type": "{int}",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 102,
            "description": "Suspension damping ratio, one indicates critical damping",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "dampingRatio",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 112,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "enableLimit",
            "type": "{boolean}",
            "default": "false",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 121,
            "description": "Enable/disable the joint motor.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "enableMotor",
            "type": "{boolean}",
            "default": "false",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 131,
            "description": "Suspension frequency, zero indicates no suspension",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "upperTranslation",
            "type": "{number}",
            "default": "0",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 141,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "maxMotorTorque",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 150,
            "description": "The desired motor speed in radians per second.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "motorSpeed",
            "type": "{float}",
            "default": "0.0",
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js",
            "line": 189,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "bodyA",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "bodyB",
                    "description": "",
                    "type": "B2Body"
                },
                {
                    "name": "anchor",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "axis",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2WheelJointDef",
            "module": "Joints"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 48,
            "description": "The body origin transform.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_xf",
            "type": "{b2Transform}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 58,
            "description": "The previous transform for particle simulation. Only used by the\n<a href=../modules/Particle.html>Particle</a>\nand\n<a href=../modules/ParticleSystem.html>ParticleSystem</a> Module's.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_xf0",
            "type": "{b2Transform}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 71,
            "description": "The swept motion for continuous collision detection.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sweep",
            "type": "{b2Sweep}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 80,
            "description": "Getter memory management.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_sweep",
            "type": "{b2Sweep}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 89,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearVelocity",
            "type": "{b2Vec2}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 96,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_force",
            "type": "{b2Vec2}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 116,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 121,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 126,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 131,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 136,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 141,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 146,
            "export": "",
            "type": "{boolean}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 152,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_flags",
            "type": "{binary}",
            "default": "0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 172,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_world",
            "type": "{b2World}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 197,
            "description": "The angular velocity of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularVelocity",
            "type": "{float}",
            "default": "b2bodyDef.angularVelocity",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 207,
            "description": "Linear damping is use to reduce the linear velocity. The\ndamping parameter can be larger than 1.0f but the damping\neffect becomes sensitive to the time step when the damping\nparameter is large.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_linearDamping",
            "type": "{int}",
            "default": "b2bodyDef.linearDamping",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 220,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_angularDamping",
            "type": "{int}",
            "default": "b2bodyDef.angularDamping",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 228,
            "description": "For inertia (perceived gravity) scaling.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_inertiaScale",
            "type": "{float}",
            "default": "b2bodyDef.inertiaScale",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 238,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_torque",
            "type": "{float}",
            "default": "0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 246,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_sleepTime",
            "type": "{float}",
            "default": "0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 255,
            "description": "The body type: Static, Dynamic or Kinematic.</br></br>\n\nNOTE: The\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      adds a fourth type: Tweened. TODO crosslink addPhysicsJS API\n      Tweened is a Kinematic body moved by a FlashCC timeline tween.\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n      translates the timeline tween motion into linear and angular\n      velocities applied appropriately to its corresponding kinematic\n      <a href=../classes/b2Body.html>b2Body</a>\n      in the\n      <a href=../classes/b2World.html>b2World</a>\n      simulation.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_type",
            "type": "{int}",
            "default": "b2bodyDef.type",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 283,
            "description": "Body's mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_mass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 293,
            "description": "Body's inverse mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invMass",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 304,
            "description": "Rotational inertia about the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_I",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 314,
            "description": "Inverse rotational inertia about the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_invI",
            "type": "{float}",
            "default": "0.0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 324,
            "description": "Application specific data.\n\nNOTE: Using the\n      <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n      m_userData is managed for you extending either a\n      <a href=http://www.createjs.com/docs/easeljs/classes/Container.html>createjs.container</a>\n      or\n      <a href=http://www.createjs.com/docs/easeljs/classes/MovieClip.html>createjs.movieClip</a>\n      class.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_userData",
            "type": "{*}",
            "default": "b2bodyDef.userData",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 342,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_fixtureList",
            "type": "{b2Fixture|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 350,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_fixtureCount",
            "type": "{int}",
            "default": "0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 358,
            "export": "",
            "type": "{number}",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 365,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_controllerList",
            "type": "{b2ControllerEdge|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 373,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_controllerCount",
            "type": "{int}",
            "default": "0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 382,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_jointList",
            "type": "{b2JointEdge|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 390,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_contactList",
            "type": "{b2ContactEdge|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 398,
            "description": "The previous body in the world's 'bodies linked-list'.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_prev",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 408,
            "description": "The next body in the world's 'bodies linked-list'.\nMaybe null if 'this' body instance is the 'head' of the linked-list.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_next",
            "type": "{b2Body|null}",
            "default": "null",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 439,
            "description": "b2BodyDef base class default: unknown.",
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "b2_staticBody",
            "type": "{binary}\ndefault      -1",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 450,
            "description": "Static: zero mass, zero velocity, may be manually moved.",
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "b2_staticBody",
            "type": "{binary}\ndefault      0",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 461,
            "description": "Kinematic: zero mass, non-zero velocity set by user, moved by solver.",
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "b2_kinematicBody",
            "type": "{binary}\ndefault      1",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 472,
            "description": "Dynamic: positive mass, non-zero velocity determined by forces, moved by solver.",
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "b2_dynamicBody",
            "type": "{binary}\ndefault      2",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 483,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "b2_bulletBody",
            "type": "{binary}\ndefault      2",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 494,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_islandFlag",
            "type": "{binary}\ndefault      0x0001",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 503,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_awakeFlag",
            "type": "{binary}\ndefault      0x0002",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 512,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_allowSleepFlag",
            "type": "{binary}\ndefault      0x0004",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 521,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_bulletFlag",
            "type": "{binary}\ndefault      0x0008",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 530,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_fixedRotationFlag",
            "type": "{binary}\ndefault      0x0010",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 539,
            "access": "public",
            "tagname": "",
            "static": "@const",
            "itemtype": "property",
            "name": "e_activeFlag",
            "type": "{binary}\ndefault      0x0020",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 548,
            "description": "Object pool for memory management.",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 598,
            "description": "Creates a fixture and attach it to 'this' body instance. Use this\nfunction if you need to set some fixture parameters, like\nfriction. Otherwise you can create the fixture directly from\na shape's Set(As)...() methods.\nIf the density is non-zero, this function automatically\nupdates the mass of the body. Contacts are not created until\nthe next time step.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "createFixture",
            "params": [
                {
                    "name": "def",
                    "description": "The fixture definition.",
                    "type": "B2FixtureDef"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Fixture"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 651,
            "description": "Creates a fixture from a shape and attach it to this body.\nThis is a convenience function. Use\n<a href=../classes/b2FixtureDef.html>b2FixtureDef</a>\nif you need to set parameters like friction, restitution, user data, or\nfiltering.\nIf the density is non-zero, this function automatically\nupdates the mass of the body.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "createFixtureShape",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to be cloned.",
                    "type": "B2Shape"
                },
                {
                    "name": "density",
                    "description": "The shape density (set to zero for static bodies).",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Fixture"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 681,
            "description": "Destroy a fixture. This removes the fixture from the\nbroad-phase and destroys all contacts associated with this\nfixture. This will automatically adjust the mass of the body\nif the body is dynamic and the fixture has positive density.\nAll fixtures attached to a body are implicitly destroyed when\nthe body is destroyed.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroyFixture",
            "params": [
                {
                    "name": "fixture",
                    "description": "The fixture to be removed.",
                    "type": "B2Fixture"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 765,
            "description": "Set the position of the body's origin and rotation.\nManipulating a body's transform may cause non-physical\nbehavior.\n\nNote: contacts are updated on the next call to\n<a href=../classes/b2World.html#method_step>b2World.step()</a>.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setPositionAndAngle",
            "params": [
                {
                    "name": "position",
                    "description": "The world position of the body's local origin.",
                    "type": "B2Vec2"
                },
                {
                    "name": "angle",
                    "description": "The world rotation in radians.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 810,
            "description": "Set the body transform for the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setTransform",
            "params": [
                {
                    "name": "transform",
                    "description": "",
                    "type": "B2Transform"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 823,
            "description": "Get the body transform for the body's origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTransform",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object.",
                    "type": "Object|b2Transform=",
                    "optional": true,
                    "optdefault": "b2Transform"
                }
            ],
            "return": {
                "description": "The world transform of the body's origin.",
                "type": "Object|b2Transform"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 836,
            "description": "Get the world body origin position.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getPosition",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object.",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out      The world position of the body's origin.",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 849,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 859,
            "description": "Get the angle in radians.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAngle",
            "return": {
                "description": "The current world rotation angle in radians.",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 870,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAngle",
            "params": [
                {
                    "name": "angle",
                    "description": "In radians.",
                    "type": "Float=",
                    "optional": true,
                    "optdefault": "0.0"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 881,
            "description": "Get the world body origin rotation.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getRotation",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object.",
                    "type": "Object|b2Transform=",
                    "optional": true,
                    "optdefault": "b2Transform"
                }
            ],
            "return": {
                "description": "out      The current world rotation angle on a b2Transform.",
                "type": "Object|b2Transform"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 894,
            "description": "Set the world body origin rotation.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "rotation",
                    "description": "In radians.",
                    "type": "Float=",
                    "optional": true,
                    "optdefault": "0.0"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 907,
            "description": "Get the world position of the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getWorldCenter",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 920,
            "description": "Get the local position of the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalCenter",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 933,
            "description": "Set the linear velocity of the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLinearVelocity",
            "params": [
                {
                    "name": "velocity",
                    "description": "The new linear velocity of the center of mass.",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 950,
            "description": "Get the linear velocity of the center of mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearVelocity",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 963,
            "description": "Set the angular velocity.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAngularVelocity",
            "params": [
                {
                    "name": "omega",
                    "description": "The new angular velocity in radians/second.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 981,
            "description": "Get the angular velocity.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAngularVelocity",
            "return": {
                "description": "The angular velocity in radians/second.",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 992,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getDefinition",
            "params": [
                {
                    "name": "bodyDef",
                    "description": "reusable object",
                    "type": "B2BodyDef",
                    "optional": true,
                    "optdefault": "b2BodyDef"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2BodyDef"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1017,
            "description": "Apply a force at a world point. If the force is not applied\nat the center of mass, it will generate a torque and affect\nthe angular velocity. This wakes up the body by default.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "The world force vector, usually in Newtons (N).",
                    "type": "B2Vec2"
                },
                {
                    "name": "point",
                    "description": "The world position of the point of application.",
                    "type": "B2Vec2"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1045,
            "description": "Apply a force to the center of mass. This wakes up the body by default.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "applyForce",
            "params": [
                {
                    "name": "force",
                    "description": "The world force vector, usually in Newtons (N).",
                    "type": "B2Vec2"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1069,
            "description": "Apply a torque. This affects the angular velocity without\naffecting the linear velocity of the center of mass. This\nwakes up the body by default.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "applyTorque",
            "params": [
                {
                    "name": "torque",
                    "description": "About the z-axis (out of the screen), usually in N-m.",
                    "type": "Float",
                    "optional": true,
                    "optdefault": "0.0"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1094,
            "description": "Apply an impulse at a point. This immediately modifies the\nvelocity. It also modifies the angular velocity if the point\nof application is not at the center of mass. This wakes up\nthe body by default.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "applyImpulse",
            "params": [
                {
                    "name": "impulse",
                    "description": "The world impulse vector, usually in N-seconds or kg-m/s.",
                    "type": "Float"
                },
                {
                    "name": "point",
                    "description": "The world position of the point of application.",
                    "type": "Float"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1123,
            "description": "Apply an impulse at a point. This immediately modifies the\nvelocity. It also modifies the angular velocity if the point\nof application is not at the center of mass. This wakes up\nthe body by default.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "applyImpulse",
            "params": [
                {
                    "name": "impulse",
                    "description": "The world impulse vector, usually in N-seconds or kg-m/s.",
                    "type": "Float"
                },
                {
                    "name": "wake",
                    "description": "Also wake up the body.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1149,
            "description": "Get the total mass of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMass",
            "return": {
                "description": "The mass, usually in kilograms (kg).",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1160,
            "description": "Get the rotational inertia of the body about the local origin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getInertia",
            "return": {
                "description": "The rotational inertia, usually in kg-m^2.",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1171,
            "description": "Get the mass data of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getMassData",
            "params": [
                {
                    "name": "massData",
                    "description": "",
                    "type": "B2MassData"
                }
            ],
            "return": {
                "description": "massData  Containing the mass, inertia and center of the body.",
                "type": "B2MassData"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1186,
            "description": "Set the mass properties to override the mass properties of the fixtures.\nNote that this changes the center of mass position.\nNote that creating or destroying fixtures can also alter the mass.\nThis function has no effect if the body isn't dynamic.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setMassData",
            "params": [
                {
                    "name": "massData",
                    "description": "The mass properties.",
                    "type": "B2MassData"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1241,
            "description": "This resets the mass properties to the sum of the mass\nproperties of the fixtures. This normally does not need to be\ncalled unless you called SetMassData to override the mass and\nyou later want to reset the mass.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "resetMassData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1321,
            "description": "Get the world coordinates of a point given the local coordinates.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getWorldPoint",
            "params": [
                {
                    "name": "localPoint",
                    "description": "A point on the body measured relative the the body's origin.",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable object.",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out            A point expressed in world coordinates.",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1334,
            "description": "Get the world coordinates of a vector given the local coordinates.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getWorldVector",
            "params": [
                {
                    "name": "localVector",
                    "description": "A vector fixed in the body.",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable object.",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out            Expressed in world coordinates.",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1347,
            "description": "Gets a local point relative to the body's origin given a world point.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalPoint",
            "params": [
                {
                    "name": "worldPoint",
                    "description": "A point in world coordinates.",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable object.",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out            The corresponding local point relative to the body's origin.",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1360,
            "description": "Gets a local vector given a world vector.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLocalVector",
            "params": [
                {
                    "name": "worldVector",
                    "description": "A vector in world coordinates.",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable object.",
                    "type": "Object|b2Vec2=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out            The corresponding local vector.",
                "type": "Object|b2Vec2"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1373,
            "description": "Get the world linear velocity of a world point attached to this body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearVelocityFromWorldPoint",
            "params": [
                {
                    "name": "worldPoint",
                    "description": "A point in world coordinates.",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable vector object.",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "The world velocity of a point.",
                "type": "B2Vec2|Object"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1390,
            "description": "Get the world velocity of a local point.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearVelocityFromLocalPoint",
            "params": [
                {
                    "name": "localPoint",
                    "description": "A point in local coordinates",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "Reusable vector object.",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "The world velocity of a point.",
                "type": "B2Vec2|Object"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1403,
            "description": "Get the linear damping of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getLinearDamping",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1414,
            "description": "Set the linear damping of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setLinearDamping",
            "params": [
                {
                    "name": "damping",
                    "description": "",
                    "type": "Float",
                    "optional": true,
                    "optdefault": "0.0"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1427,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAngularDamping",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1436,
            "description": "Get the angular damping of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAngularDamping",
            "params": [
                {
                    "name": "angularDamping",
                    "description": "",
                    "type": "Float",
                    "optional": true,
                    "optdefault": "0.0"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1450,
            "description": "Get the gravity scale of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getGravityScale",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1461,
            "description": "Get the gravity scale of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAngularDamping",
            "params": [
                {
                    "name": "scale",
                    "description": "",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1473,
            "description": "Set the type of this body. This may alter the mass and velocity.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1509,
            "description": "while (ce) {\n    /** @type {b2ContactEdge} */ var ce0 = ce;\n    ce = ce.next;\n    this.m_world.m_contactManager.destroy( ce0.contact );\n}\nthis.m_contactList = null;\n\n// Touch the proxies so that new contacts will be created (when appropriate)\n/** @type {b2BroadPhase} */ var broadPhase = this.m_world.m_contactManager.m_broadPhase;\nfor (/** @type {b2Fixture} */ var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n        broadPhase.touchProxy( f.m_proxies[i].proxy );\n    }\n}\n     };\n\n     /**\n      * Get the type of this body.\n      *\n      * @public\n      * @method  getType\n      * @return  {int} body type",
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1538,
            "description": "Should this body be treated like a bullet for continuous collision detection?",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setBullet",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1557,
            "description": "Is this body treated like a bullet for continuous collision detection?",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isBullet",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1570,
            "description": "You can disable sleeping on this body. If you disable sleeping,\nthe body will be woken.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setSleepingAllowed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1597,
            "description": "Set the sleep state of the body. A sleeping body has very low CPU cost.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAwake",
            "params": [
                {
                    "name": "flag",
                    "description": "Set to TRUE to wake the body,\n                                FALSE to put it to sleep.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1636,
            "description": "Get the sleeping state of this body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isAwake",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1649,
            "description": "Set this body to have fixed rotation. This causes the mass to\nbe reset.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setFixedRotation",
            "return": {
                "description": "true if the body is awake.",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1674,
            "description": "Does this body have fixed rotation?",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isFixedRotation",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1688,
            "description": "Set the active state of the body.\n\nAn inactive body is not simulated and cannot be collided with\nor woken up.\nIf you pass a flag of true, all fixtures will be added to the\nbroad-phase.\nIf you pass a flag of false, all fixtures will be removed from\nthe broad-phase and all contacts will be destroyed.\n\nFixtures and joints are otherwise unaffected. You may continue\nto create/destroy fixtures and joints on inactive bodies.\nFixtures on an inactive body are implicitly inactive and will\nnot participate in collisions, ray-casts, or queries.\n\nJoints connected to an inactive body are implicitly inactive.\nAn inactive body is still owned by a\n<a href=../classes/b2World.html>b2World</a>\nobject and remains in the body list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setActive",
            "params": [
                {
                    "name": "active",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1749,
            "description": "Get the active state of the body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isActive",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1762,
            "description": "Is this body allowed to sleep",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isSleepingAllowed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1775,
            "description": "Get the list of all fixtures attached to this body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getFixtureList",
            "return": {
                "description": "",
                "type": "B2Fixture"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1786,
            "description": "Get the list of all joints attached to this body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointList",
            "return": {
                "description": "",
                "type": "B2JointEdge"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1797,
            "description": "Get the list of all contacts attached to this body.\n\nWarning: This list changes during the time step and you may\nmiss some collisions if you don't use\n<a href=../classes/b2ContactListener.html>b2ContactListener</a>.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getContactList",
            "return": {
                "description": "",
                "type": "B2ContactEdge"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1812,
            "description": "Get the next body in the world's body list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getNext",
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1823,
            "description": "Get the user data reference that was provided by the body definition.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getUserData",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1834,
            "description": "Set the user data. Use this to store your application specific data.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setUserData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "*"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1846,
            "description": "Get the parent world of this body.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getWorld",
            "return": {
                "description": "",
                "type": "B2World"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1857,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "synchronizeFixtures",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1874,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "synchronizeTransform",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1885,
            "description": "This is used to prevent connected bodies from colliding.\nIt may lie, depending on the collideConnected flag.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "shouldCollide",
            "params": [
                {
                    "name": "other",
                    "description": "<a href=../classes/b2Body.html>b2Body</a>",
                    "type": "B2Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1910,
            "description": "Advance to the new safe time. This doesn't sync the broad-phase.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "advance",
            "params": [
                {
                    "name": "alpha",
                    "description": "The original start time.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1929,
            "description": "See\n<a href=../classes/b2Controller.html>b2Controller</a>\nlist.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getControllerList",
            "return": {
                "description": "",
                "type": "B2ControllerEdge"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1942,
            "description": "See\n<a href=../classes/b2Controller.html>b2Controller</a>\nlist.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getControllerCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 1956,
            "description": "Splits a body into two bodies.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "B2QueryCallback"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js",
            "line": 2014,
            "description": "Merges two bodies into one.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "merge",
            "params": [
                {
                    "name": "other",
                    "description": "<a href=../classes/b2Body.html>b2Body</a>",
                    "type": "B2Body"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2Body",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 47,
            "description": "The flag that controls automatic clearing of forces after each time step.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_flag_clearForces",
            "type": "{boolean}",
            "default": "true",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 58,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_contactManager",
            "type": "{b2ContactManager}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 65,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_gravity",
            "type": "{b2Vec2}",
            "default": "(0,0)",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 73,
            "description": "Development profiling data.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_profile",
            "type": "{b2Profile}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 82,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_groundBody",
            "type": "{int}",
            "default": "b2Body.",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 93,
            "description": "Enable/disable sleep.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_allowSleep",
            "type": "{boolean}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 103,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyList",
            "type": "{b2Body}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 111,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_bodyCount",
            "type": "{int}",
            "default": "0",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 119,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_destructionListener",
            "type": "{?b2DestructionListener|null}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 127,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_debugDraw",
            "type": "{?b2DebugDraw|null}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 145,
            "type": "{boolean}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 149,
            "type": "{boolean}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 154,
            "description": "This is used to compute the time step ratio to support a variable time step.",
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_inv_dt0",
            "type": "{float}",
            "default": "0.0",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 164,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_island",
            "type": "{b2Island}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 171,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_jointCount",
            "type": "{int}",
            "default": "0",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 179,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_jointList",
            "type": "{?b2Joint|null}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 188,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "s_stack",
            "type": "{Array.<?b2Body>}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 195,
            "description": "These are for debugging the solver.",
            "type": "{boolean}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 206,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_particleSystemList",
            "type": "{?b2ParticleSystem}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 215,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_controllerList",
            "type": "{?b2Controller|null}",
            "default": "null",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 223,
            "access": "public",
            "tagname": "",
            "itemtype": "property",
            "name": "m_controllerCount",
            "type": "{int}",
            "default": "0",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 236,
            "description": "Object pool for memory management.",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 272,
            "description": "Returns FALSE if the b2World has zero force on BOTH the x and y axis.\n\n NOTE:   <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n         feeds zero force into addBox2D and handles force itself,\n         which enables its much more advanced, customisable force abilities.\n         Including multiple force fields.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "hasForce",
            "return": {
                "description": "TRUE if force x AND y != 0.0,\n                         FALSE otherwise.",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 291,
            "description": "Enable/disable allowSleeping.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAllowSleeping",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 311,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAllowSleeping",
            "return": {
                "description": "flag",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 320,
            "description": "Enable/disable warm starting. For testing.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setWarmStarting",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 332,
            "description": "Enable/disable continuous physics. For testing.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setContinuousPhysics",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 344,
            "description": "Get continuous physics status. For testing.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setContinuousPhysics",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 355,
            "description": "Enable/disable single stepped continuous physics. For\ntesting.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setSubStepping",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 368,
            "description": "Get single stepped continuous physics status.\nFor testing.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getSubStepping",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 380,
            "description": "Get the world body list. With the returned body, use\nb2Body::GetNext to get the next body in the world list. A\nNULL body indicates the end of the list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getBodyList",
            "return": {
                "description": "The head of the world body linked-list.",
                "type": "B2Body"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 393,
            "description": "Get the world joint list. With the returned joint, use\nb2Joint.getNext to get the next joint in the world list. A\nNULL joint indicates the end of the list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointList",
            "return": {
                "description": "The head of the world joint linked-list.",
                "type": "b2Joint"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 407,
            "description": "Get the world particle-system list. With the returned body, use\nb2ParticleSystem::GetNext to get the next particle-system in the world\nlist. A NULL particle-system indicates the end of the list.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getParticleSystemList",
            "return": {
                "description": "The head of the world particle-system list.\n                                 NULL particle-system indicates the end of the list.",
                "type": "B2ParticleSystem"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 422,
            "description": "Get the world contact list. With the returned contact, use\n<a href=../classes/b2Contact.html#method_getNext>b2Contact.getNext()</a>\nto get the next contact in the world\nlist. A NULL contact indicates the end of the list.\n\n Warning: contacts are created and destroyed in the middle of a\n time step. Use\n <a href=../classes/b2ContactListener.html>b2ContactListener</a>\n to avoid missing contacts.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getContactList",
            "return": {
                "description": "The head of the world contact linked-list",
                "type": "B2Contact"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 441,
            "description": "Get the number of bodies.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getBodyCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 452,
            "description": "Get the number of joints.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getJointCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 463,
            "description": "Get the number of contacts (each may have 0 or more contact points).",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getContactCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 474,
            "description": "Change the global gravity vector.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setGravity",
            "params": [
                {
                    "name": "gravity",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "wake",
                    "description": "false lets bodies sleep through this update.",
                    "type": "Boolean=",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 497,
            "description": "Get the global gravity vector.\n\n NOTE:  Unless a reusable object is provided, this returns a permanently\n        heap allocated b2Vec2 for memory management.\n        Copy returned values to avoid un expected value changes due to recycling.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getGravity",
            "params": [
                {
                    "name": "out",
                    "description": "reusable object",
                    "type": "B2Vec2|Object=",
                    "optional": true,
                    "optdefault": "b2Vec2"
                }
            ],
            "return": {
                "description": "out",
                "type": "B2Vec2|Object"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 514,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getGroundBody",
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 523,
            "description": "Is the world locked (is it mid time step).",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "isLocked",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 535,
            "description": "Set the flag that controls automatic clearing of forces after each time step.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setAutoClearForces",
            "params": [
                {
                    "name": "flag",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 546,
            "description": "Get the flag that controls automatic clearing of forces after each time step.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getAutoClearForces",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 557,
            "description": "Get the contact manager for testing.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getContactManager",
            "return": {
                "description": "",
                "type": "B2ContactManager"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 568,
            "description": "Get the current profile.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "B2Profile"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 579,
            "description": "Register a destruction listener. The listener is owned by you and must\nremain in scope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDestructionListener",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 591,
            "description": "Register a contact filter to provide specific control over collision.\nOtherwise the default filter is used (b2_defaultFilter). The listener is\nowned by you and must remain in scope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": ".setContactFilter",
            "params": [
                {
                    "name": "filter",
                    "description": "Data to filter contacts by.",
                    "type": "B2Filter"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 605,
            "description": "Register a contact event listener. The listener is owned by you and must\nremain in scope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setContactListener",
            "params": [
                {
                    "name": "listener",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 618,
            "description": "Register a routine for debug drawing. The debug draw functions are called\ninside with b2World::DrawDebugData method. The debug draw object is owned\nby you and must remain in scope.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setDebugDraw",
            "params": [
                {
                    "name": "debugDraw",
                    "description": "DebugDrawing definition.",
                    "type": "B2DebugDraw"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 632,
            "description": "Create a rigid body given a definition. No reference to the definition is retained.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "createBody",
            "params": [
                {
                    "name": "bodyDef",
                    "description": "",
                    "type": "B2BodyDef"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Body"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 656,
            "description": "// Add to world doubly linked list.\n        b.m_prev = null;\n        b.m_next = this.m_bodyList;\n        if ( this.m_bodyList ) {\n            this.m_bodyList.m_prev = b;\n        }\n        this.m_bodyList = b;\n        ++this.m_bodyCount;\nreturn b;\n    };\n\n    /**\n     * Destroy a rigid body.</br></br>\n     *\n     *  Warning: This automatically deletes all associated shapes and joints.</br>\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  destroyBody\n     * @param   {b2Body}    body\n     * @return  {void}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 697,
            "description": "while (je) {\n    /** @type {b2JointEdge} */ var je0 = je;\n    je = je.next;\n\n    if ( this.m_destructionListener ) {\n        this.m_destructionListener.sayGoodbyeJoint( je0.joint );\n    }\n\n    this.destroyJoint( je0.joint );\n\n    body.m_jointList = je;\n}\nbody.m_jointList = null;",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 714,
            "description": "while (coe) {\n    /** @type {b2ControllerEdge} */ var coe0 = coe;\n    coe = coe.nextController;\n    coe0.controller.removeBody( body );\n}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 722,
            "description": "while (ce) {\n    /** @type {b2ContactEdge} */ var ce0 = ce;\n    ce = ce.next;\n    this.m_contactManager.destroy( ce0.contact );\n}\nbody.m_contactList = null;\n\n// Delete the attached fixtures. This destroys broad-phase proxies.\n/** @type {b2Fixture} */ var f = body.m_fixtureList;\nwhile (f) {\n    /** @type {b2Fixture} */ var f0 = f;\n    f = f.m_next;\n\n    if ( this.m_destructionListener ) {\n        this.m_destructionListener.sayGoodbyeFixture( f0 );\n    }\n\n    f0.destroyProxies( this.m_contactManager.m_broadPhase );\n    f0.destroy();\n\n\n    body.m_fixtureList = f;\n    body.m_fixtureCount -= 1;\n}\nbody.m_fixtureList = null;\nbody.m_fixtureCount = 0;\n\n// Remove world body list.\nif ( body.m_prev ) {\n    body.m_prev.m_next = body.m_next;\n}\n\nif ( body.m_next ) {\n    body.m_next.m_prev = body.m_prev;\n}\n\nif ( body === this.m_bodyList ) {\n    this.m_bodyList = body.m_next;\n}\n\n--this.m_bodyCount;\n    };\n\n    /**\n     * Create a joint to constrain bodies together. No reference to the definition\n     * is retained. This may cause the connected bodies to cease colliding.</br></br>\n     *\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  createJoint\n     * @param   {b2JointDef}  jointDef\n     * @return  {b2Joint}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 791,
            "description": "// Connect to the world list.\n        j.m_prev = null;\n        j.m_next = this.m_jointList;\n        if ( this.m_jointList ) {\n            this.m_jointList.m_prev = j;\n        }\n        this.m_jointList = j;\n        ++this.m_jointCount;\n// Connect to the bodies' doubly linked lists.\n        j.m_edgeA.joint = j;\n        j.m_edgeA.other = j.m_bodyB;\n        j.m_edgeA.prev = null;\n        j.m_edgeA.next = j.m_bodyA.m_jointList;\n        if ( j.m_bodyA.m_jointList ) j.m_bodyA.m_jointList.prev = j.m_edgeA;\n        j.m_bodyA.m_jointList = j.m_edgeA;\nj.m_edgeB.joint = j;\n        j.m_edgeB.other = j.m_bodyA;\n        j.m_edgeB.prev = null;\n        j.m_edgeB.next = j.m_bodyB.m_jointList;\n        if ( j.m_bodyB.m_jointList ) j.m_bodyB.m_jointList.prev = j.m_edgeB;\n        j.m_bodyB.m_jointList = j.m_edgeB;\n/** @type {b2Body} */ var bodyA = jointDef.bodyA;\n        /** @type {b2Body} */ var bodyB = jointDef.bodyB;\n// If the joint prevents collisions, then flag any contacts for filtering.\n        if ( !jointDef.collideConnected ) {\n            /** @type {b2ContactEdge} */ var edge = bodyB.getContactList();\n            while (edge) {\n                if ( edge.other === bodyA ) {\n                    // Flag the contact for filtering at the next time step (where either\n                    // body is awake).\n                    edge.contact.flagForFiltering();\n                }\n        edge = edge.next;\n            }\n        }\n// Note: creating a joint doesn't wake the bodies.\nreturn j;\n    };\n\n    /**\n     *  Destroy a joint. This may cause the connected bodies to begin colliding.</br></br>\n     *\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  destroyJoint\n     * @param   {b2Joint}   joint\n     * @return  {void}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 863,
            "description": "// Remove from the doubly linked list.\n        if ( joint.m_prev ) {\n            joint.m_prev.m_next = joint.m_next;\n        }\nif ( joint.m_next ) {\n            joint.m_next.m_prev = joint.m_prev;\n        }\nif ( joint === this.m_jointList ) {\n            this.m_jointList = joint.m_next;\n        }\n// Disconnect from island graph.\n        /** @type {b2Body} */ var bodyA = joint.m_bodyA;\n        /** @type {b2Body} */ var bodyB = joint.m_bodyB;\n// Wake up connected bodies.\n        bodyA.setAwake( true );\n        bodyB.setAwake( true );\n// Remove from body 1.\n        if ( joint.m_edgeA.prev ) {\n            joint.m_edgeA.prev.next = joint.m_edgeA.next;\n        }\nif ( joint.m_edgeA.next ) {\n            joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n        }\nif ( joint.m_edgeA === bodyA.m_jointList ) {\n            bodyA.m_jointList = joint.m_edgeA.next;\n        }\njoint.m_edgeA.prev = null;\n        joint.m_edgeA.next = null;\n// Remove from body 2\n        if ( joint.m_edgeB.prev ) {\n            joint.m_edgeB.prev.next = joint.m_edgeB.next;\n        }\nif ( joint.m_edgeB.next ) {\n            joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n        }\nif ( joint.m_edgeB === bodyB.m_jointList ) {\n            bodyB.m_jointList = joint.m_edgeB.next;\n        }\njoint.m_edgeB.prev = null;\n        joint.m_edgeB.next = null;\nb2JointFactory.destroy( joint, null );",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 927,
            "description": "while (edge) {\n    if ( edge.other === bodyA ) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n}\n        }\n    };",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 941,
            "description": "Create a particle system given a definition. No reference to the\ndefinition is retained.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "createParticleSystem",
            "params": [
                {
                    "name": "systemDef",
                    "description": "",
                    "type": "B2ParticleSystemDef"
                }
            ],
            "return": {
                "description": "",
                "type": "B2ParticleSystem"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 979,
            "description": "Destroy a particle system.\n\n Warning: This function is locked during callbacks.</br>\n   NOTE:  However using the\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n          event listeners you can do what every you want whenever you want and\n          <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n          manages the locked world problems for you.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "destroyParticleSystem",
            "params": [
                {
                    "name": "system",
                    "description": "",
                    "type": "B2ParticleSystem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1018,
            "description": "Find islands, integrate and solve constraints, solve position constraints.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "solve",
            "params": [
                {
                    "name": "step",
                    "description": "",
                    "type": "B2TimeStep"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1045,
            "description": "island.initialize( this.m_bodyCount,\n    this.m_contactManager.m_contactCount,\n    this.m_jointCount,\n    null, // this.m_stackAllocator,\n    this.m_contactManager.m_contactListener );\n\n// Clear all the island flags.\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_flag_islandFlag = false;\n}\nfor (/** @type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n    c.m_flag_islandFlag = false;\n}\nfor (/** @type {b2Joint} */ var j = this.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n}\n\n// Build and simulate all awake islands.\n/** @type {number} */ var stackSize = this.m_bodyCount;\n/** @type {Array.<?b2Body>} */ var stack = this.s_stack;\nfor (/** @type {b2Body} */ var seed = this.m_bodyList; seed; seed = seed.m_next) {\n    if ( seed.m_flag_islandFlag ) {\n        continue;\n    }\n\n    if ( !seed.isAwake() || !seed.isActive() ) {\n        continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if ( seed.getType() === b2Body.b2_staticBody ) {\n        continue;\n    }\n\n    // Reset island and stack.\n    island.clear();\n    /** @type {number} */ var stackCount = 0;\n    stack[stackCount++] = seed;\n    seed.m_flag_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stackCount > 0) {\n        // Grab the next body off the stack and add it to the island.",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1108,
            "description": "// Has this contact already been added to an island?\n                    if ( contact.m_flag_islandFlag ) {\n                        continue;\n                    }\n// Is this contact solid and touching?\n                    if ( !contact.isEnabled() || !contact.isTouching() ) {\n                        continue;\n                    }\n// Skip sensors.\n                    /** @type {boolean} */ var sensorA = contact.m_fixtureA.m_isSensor;\n                    /** @type {boolean} */ var sensorB = contact.m_fixtureB.m_isSensor;\n                    if ( sensorA || sensorB ) {\n                        continue;\n                    }\nisland.addContact( contact );\n                    contact.m_flag_islandFlag = true;\n/** @type {b2Body} */ var other = ce.other;\n// Was the other body already added to this island?\n                    if ( other.m_flag_islandFlag ) {\n                        continue;\n                    }",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1173,
            "description": "island.solve( profile, step, this.m_gravity, this.m_allowSleep );\nthis.m_profile.solveInit += profile.solveInit;\nthis.m_profile.solveVelocity += profile.solveVelocity;\nthis.m_profile.solvePosition += profile.solvePosition;\n\n// Post solve cleanup.\nfor (/** @type {number} */ var i = 0; i < island.m_bodyCount; ++i) {\n    // Allow static bodies to participate in other islands.",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1196,
            "description": "// Synchronize fixtures, check for out of range bodies.\n            for (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n                // If a body was not in an island then it did not move.\n                if ( !b.m_flag_islandFlag ) {\n                    continue;\n                }\n    if ( b.getType() === b2Body.b2_staticBody ) {\n                    continue;\n                }\n    // Update fixtures (for broad-phase).\n                b.synchronizeFixtures();\n            }\n// Look for new contacts.\n            this.m_contactManager.findNewContacts();\n            this.m_profile.broadphase = timer.getMilliseconds();\n        }\n    };\n\n    /**\n     * Find Time Of Impact contacts and solve them.\n     *\n     * @public\n     * @method  solveTOI\n     * @param   {b2TimeStep} step\n     * @return  {void}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1229,
            "description": "island.initialize( 2 * b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIContactsPerIsland, 0, null, this.m_contactManager.m_contactListener );\n\nif ( this.m_stepComplete ) {\n    for (/** @type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n        b.m_flag_islandFlag = false;\n        b.m_sweep.alpha0 = 0;\n    }\n\n    for (/** @type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Invalidate TOI\n        c.m_flag_toiFlag = c.m_flag_islandFlag = false;\n        c.m_toiCount = 0;\n        c.m_toi = 1;\n    }\n}\n\n// Find TOI events and solve them.\nfor (; ;) {\n    // Find the first TOI.\n    /** @type {b2Contact} */ var minContact = null;\n    /** @type {number} */ var minAlpha = 1;\n\n    for (/* type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Is this contact disabled?\n        if ( !c.isEnabled() ) {\n            continue;\n        }\n\n        // Prevent excessive sub-stepping.\n        if ( c.m_toiCount > b2Settings.b2_maxSubSteps ) {\n            continue;\n        }\n\n        /** @type {number} */ var alpha = 1;\n        if ( c.m_flag_toiFlag ) {\n            // This contact has a valid cached TOI.\n            alpha = c.m_toi;\n        }\n        else {\n            /** @type {b2Fixture} */ var fA = c.getFixtureA();\n            /** @type {b2Fixture} */ var fB = c.getFixtureB();\n\n            // Is there a sensor?\n            if ( fA.isSensor() || fB.isSensor() ) {\n                continue;\n            }\n\n            /** @type {b2Body} */ var bA = fA.getBody();\n            /** @type {b2Body} */ var bB = fB.getBody();\n\n            /** @type {b2BodyType} */ var typeA = bA.m_type;\n            /** @type {b2BodyType} */ var typeB = bB.m_type;",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1287,
            "description": "/** @type {boolean} */ var activeB = bB.isAwake() && typeB !== b2Body.b2_staticBody;\n\n// Is at least one body active (awake and dynamic or kinematic)?\nif ( !activeA && !activeB ) {\n    continue;\n}\n\n/** @type {boolean} */ var collideA = bA.isBullet() || typeA !== b2Body.b2_dynamicBody;\n/** @type {boolean} */ var collideB = bB.isBullet() || typeB !== b2Body.b2_dynamicBody;\n\n// Are these two non-bullet dynamic bodies?\nif ( !collideA && !collideB ) {\n    continue;\n}\n\n// Compute the TOI for this contact.\n// Put the sweeps onto the same time interval.\n/** @type {number} */ var alpha0 = bA.m_sweep.alpha0;\n\nif ( bA.m_sweep.alpha0 < bB.m_sweep.alpha0 ) {\n    alpha0 = bB.m_sweep.alpha0;\n    bA.m_sweep.advance( alpha0 );\n}\nelse if ( bB.m_sweep.alpha0 < bA.m_sweep.alpha0 ) {\n    alpha0 = bA.m_sweep.alpha0;\n    bB.m_sweep.advance( alpha0 );\n}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1320,
            "description": "/** @type {number} */ var indexB = c.getChildIndexB();\n\n// Compute the time of impact in interval [0, minTOI]\n/** @type {b2TOIInput} */ var input = b2World._B2TOI_INPUT_POOL0;\ninput.proxyA.setShape( fA.getShape(), indexA );\ninput.proxyB.setShape( fB.getShape(), indexB );\ninput.sweepA.copy( bA.m_sweep );\ninput.sweepB.copy( bB.m_sweep );\ninput.tMax = 1;\n\n/** @type {b2TOIOutput} */ var output = b2World._B2TOI_OUTPUT_POOL0;\nb2Collision.timeOfImpact( output, input );\n\n// Beta is the fraction of the remaining portion of the .\n/** @type {number} */ var beta = output.t;\nif ( output.state === b2TOIOutput.e_touching ) {\n    alpha = Math.min( alpha0 + (1 - alpha0) * beta, 1 );\n}\nelse {\n    alpha = 1;\n}\n\nc.m_toi = alpha;\nc.m_flag_toiFlag = true;\n                }\n\n                if ( alpha < minAlpha ) {\n// This is the minimum TOI found so far.\nminContact = c;\nminAlpha = alpha;\n                }\n            }\n\n            if ( minContact === null || 1 - 10 * b2Settings.b2_epsilon < minAlpha ) {\n                // No more TOI events. Done!\n                this.m_stepComplete = true;\n                break;\n            }\n\n            // Advance the bodies to the TOI.\n            /* type {b2Fixture} */var fA = minContact.getFixtureA();\n            /* type {b2Fixture} */var fB = minContact.getFixtureB();\n            /* type {b2Body} */var bA = fA.getBody();\n            /* type {b2Body} */var bB = fB.getBody();\n\n            /** @type {b2Sweep} */ var backup1 = b2World._B2SWEEP_POOL1.copy( bA.m_sweep );\n            /** @type {b2Sweep} */ var backup2 = b2World._B2SWEEP_POOL2.copy( bB.m_sweep );\n\n            bA.advance( minAlpha );\n            bB.advance( minAlpha );\n\n            // The TOI contact likely has some new contact points.\n            minContact.update( this.m_contactManager.m_contactListener );\n            minContact.m_flag_toiFlag = false;\n            ++minContact.m_toiCount;\n\n            // Is the contact solid?\n            if ( !minContact.isEnabled() || !minContact.isTouching() ) {\n                // Restore the sweeps.\n                minContact.setEnabled( false );\n                bA.m_sweep.copy( backup1 );\n                bB.m_sweep.copy( backup2 );\n                bA.synchronizeTransform();\n                bB.synchronizeTransform();\n                continue;\n            }\n\n            bA.setAwake( true );\n            bB.setAwake( true );\n\n            // Build the island\n            island.clear();\n            island.addBody( bA );\n            island.addBody( bB );\n            island.addContact( minContact );\n\n            bA.m_flag_islandFlag = true;\n            bB.m_flag_islandFlag = true;\n            minContact.m_flag_islandFlag = true;\n\n            // Get contacts on bodyA and bodyB.\n            //** @type {b2Body} */ var bodies = [bA, bB];\n            for (/** @type {number} */ var i = 0; i < 2; ++i) {\n                /** @type {b2Body} */ var body = (i === 0) ? (bA) : (bB);//bodies[i];\n                if ( body.m_type === b2Body.b2_dynamicBody ) {\nfor (/** @type {b2ContactEdge} */ var ce = body.m_contactList; ce; ce = ce.next) {\n    if ( island.m_bodyCount === island.m_bodyCapacity ) {\n        break;\n    }\n\n    if ( island.m_contactCount === island.m_contactCapacity ) {\n        break;\n    }\n\n    /** @type {b2Contact} */ var contact = ce.contact;\n\n    // Has this contact already been added to the island?\n    if ( contact.m_flag_islandFlag ) {\n        continue;\n    }\n\n    // Only add static, kinematic, or bullet bodies.\n    /** @type {b2Body} */ var other = ce.other;\n    if ( other.m_type === b2Body.b2_dynamicBody && !body.isBullet() && !other.isBullet() ) {\n        continue;\n    }\n\n    // Skip sensors.\n    /** @type {boolean} */ var sensorA = contact.m_fixtureA.m_isSensor;\n    /** @type {boolean} */ var sensorB = contact.m_fixtureB.m_isSensor;\n    if ( sensorA || sensorB ) {\n        continue;\n    }\n\n    // Tentatively advance the body to the TOI.\n    /** @type {b2Sweep} */ var backup = b2World._B2SWEEP_POOL0.copy( other.m_sweep );\n    if ( !other.m_flag_islandFlag ) {\n        other.advance( minAlpha );\n    }\n\n    // Update the contact points\n    contact.update( this.m_contactManager.m_contactListener );\n\n    // Was the contact disabled by the user?\n    if ( !contact.isEnabled() ) {\n        other.m_sweep.copy( backup );\n        other.synchronizeTransform();\n        continue;\n    }\n\n    // Are there contact points?\n    if ( !contact.isTouching() ) {\n        other.m_sweep.copy( backup );\n        other.synchronizeTransform();\n        continue;\n    }\n\n    // Add the contact to the island\n    contact.m_flag_islandFlag = true;\n    island.addContact( contact );\n\n    // Has the other body already been added to the island?\n    if ( other.m_flag_islandFlag ) {\n        continue;\n    }\n\n    // Add the other body to the island.\n    other.m_flag_islandFlag = true;\n\n    if ( other.m_type !== b2Body.b2_staticBody ) {\n        other.setAwake( true );\n    }\n\n    island.addBody( other );\n}\n                }\n            }\n\n            /** @type {b2TimeStep} */ var subStep = b2World.B2TIMESTEP_SUB_POOL0;\n            subStep.dt = (1 - minAlpha) * step.dt;\n            subStep.inv_dt = 1 / subStep.dt;\n            subStep.dtRatio = 1;\n            subStep.positionIterations = step.positionIterations;\n            subStep.velocityIterations = step.velocityIterations;",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1520,
            "description": "Take a time step. This performs collision detection,\nintegration, and constraint solution.\n\nFor the numerical stability of particles, minimize the following\ndimensionless gravity acceleration:\n    gravity / particleRadius * (timeStep / particleIterations)^2\nb2ParticleSystem.b2CalculateParticleIterations() or\nCalculateReasonableParticleIterations() help to determine the optimal\nparticleIterations.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "step",
            "params": [
                {
                    "name": "deltaTime",
                    "description": "The amount of time to simulate, this should not vary.",
                    "type": "Number"
                },
                {
                    "name": "velocityIterations",
                    "description": "For the velocity constraint solver.",
                    "type": "Number"
                },
                {
                    "name": "positionIterations",
                    "description": "For the position constraint solver.",
                    "type": "Number"
                },
                {
                    "name": "particleIterations",
                    "description": "For the particle constraint solver. (Only if particle module included.)",
                    "type": "Number="
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1544,
            "description": "// If new fixtures were added, we need to find the new contacts.\n        if ( this.m_flag_newFixture ) {\n            this.m_contactManager.findNewContacts();\n            this.m_flag_newFixture = false;\n        }\nthis.m_flag_locked = true;\n/** @type {b2TimeStep} */ var step = b2World._B2TIMESTEP_POOL0;\n        step.dt = deltaTime;\n        step.velocityIterations = velocityIterations;\n        step.positionIterations = positionIterations;",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1574,
            "description": "this.m_contactManager.collide();\nthis.m_profile.collide = timer.getMilliseconds();\n        }\n\n        // Integrate velocities, solve velocity constraints, and integrate positions.\n        if ( this.m_stepComplete && step.dt > 0.0 ) {\ntimer = new b2Timer();",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1611,
            "description": "Manually clear the force buffer on all bodies. By default, forces are cleared automatically\nafter each call to Step. The default behavior is modified by calling\n<a href=../classes/b2World.html#method_setAutoClearForces>b2World.setAutoClearForces()</a>.\nThe purpose of this function is to support sub-stepping. Sub-stepping is often used to maintain\na fixed sized time step under a variable frame-rate.\nWhen you perform sub-stepping you will disable auto clearing of forces and instead call\n<a href=../classes/b2World.html#method_clearForces>b2World.clearForces()</a>\nafter all sub-steps are complete in one pass of your game loop. See\n<a href=../classes/b2World.html#method_setAutoClearForces>b2World.setAutoClearForces()</a>",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "clearForces",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1633,
            "description": "Query the world for all fixtures that potentially overlap the provided AABB.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "queryAABB",
            "params": [
                {
                    "name": "callback",
                    "description": "A user implemented callback class.",
                    "type": "B2QueryCallback|function(b2Fixture):boolean"
                },
                {
                    "name": "aabb",
                    "description": "The query box.",
                    "type": "B2AABB"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1643,
            "description": "/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1655,
            "description": "if ( callback instanceof b2QueryCallback ) {\n    return callback.reportFixture( fixture );\n}\nelse if (typeof(callback) === 'function')\n{\n    return callback( fixture );\n}\n        };\n\n        broadPhase.query( WorldQueryAABBWrapper, aabb );",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1677,
            "description": "Query the world for all fixtures that potentially overlap the\nprovided shape's AABB. Calls\n<a href=../classes/b2World.html#method_queryAABB>b2World.queryAABB()</a>\ninternally.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "queryShape",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "B2QueryCallback|function(b2Fixture):boolean"
                },
                {
                    "name": "shape",
                    "description": "",
                    "type": "B2Shape"
                },
                {
                    "name": "transform",
                    "description": "",
                    "type": "B2Transform"
                },
                {
                    "name": "childIndex",
                    "description": "",
                    "type": "Int"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1692,
            "description": "/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1705,
            "description": "if ( b2Collision.testOverlapShape( shape, 0, fixture.getShape(), 0, transform, fixture.getBody().getTransform() ) ) {\n    if ( callback instanceof b2QueryCallback ) {\n        return callback.reportFixture( fixture );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture );\n    }\n}\nreturn true;\n        };\n\n        childIndex = childIndex || 0;\n        /** @type {b2AABB} */ var aabb = b2World._B2AABB_POOL0;\n        shape.computeAABB( aabb, transform, childIndex );\n        broadPhase.query( WorldQueryShapeWrapper, aabb );",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1733,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "queryPoint",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "B2QueryCallback|function(b2Fixture):boolean"
                },
                {
                    "name": "point",
                    "description": "Point in world to test.",
                    "type": "B2Vec2"
                },
                {
                    "name": "slop",
                    "description": "",
                    "type": "Float=",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1742,
            "description": "/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1755,
            "description": "if ( fixture.testPoint( point ) ) {\n    if ( callback instanceof b2QueryCallback ) {\n        return callback.reportFixture( fixture );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture );\n    }\n}\nreturn true;\n        };\n\n        slop = (typeof(slop) === 'number') ? (slop) : (b2Settings.b2_linearSlop);\n        /** @type {b2AABB} */ var aabb = b2World._B2AABB_POOL0;\n        aabb.lowerBound.set( point.x - slop, point.y - slop );\n        aabb.upperBound.set( point.x + slop, point.y + slop );\n        broadPhase.query( WorldQueryWrapper, aabb );",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1784,
            "description": "Ray-cast the world for all fixtures in the path of the ray.\nYour callback controls whether you get the closest point, any\npoint, or n-points. The ray-cast ignores shapes that contain\nthe starting point.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rayCast",
            "params": [
                {
                    "name": "callback",
                    "description": "A user implemented callback class.",
                    "type": "B2RayCastCallback|function(b2Fixture,b2Vec2,b2Vec2,number):number"
                },
                {
                    "name": "point1",
                    "description": "The ray starting point",
                    "type": "B2Vec2"
                },
                {
                    "name": "point2",
                    "description": "The ray ending point",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1798,
            "description": "/**\n         * @return {number}\n         * @param {b2RayCastInput} input\n         * @param {b2TreeNode} proxy",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1812,
            "description": "/** @type {number} */ var index = fixture_proxy.childIndex;\n/** @type {b2RayCastOutput} */ var output = b2World._B2RAYCAST_OUTPUT_POOL0;\n/** @type {boolean} */ var hit = fixture.rayCast( output, input, index );\n\nif ( hit ) {\n    /** @type {number} */ var fraction = output.fraction;\n    /** @type {b2Vec2} */ var point = b2World._B2VEC2_POOL0;\n    point.set( (1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y );\n\n    if ( callback instanceof b2RayCastCallback ) {\n        return callback.reportFixture( fixture, point, output.normal, fraction );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture, point, output.normal, fraction );\n    }\n}\nreturn input.maxFraction;\n        };\n\n        /** @type {b2RayCastInput} */ var input = b2World._B2RAYCAST_INPUT_POOL0;\n        input.maxFraction = 1;\n        input.p1.copy( point1 );\n        input.p2.copy( point2 );\n        broadPhase.rayCast( WorldRayCastWrapper, input );",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1849,
            "description": "Return first fixture to intersect raycast.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rayCastOne",
            "params": [
                {
                    "name": "point1",
                    "description": "The ray starting point.",
                    "type": "B2Vec2"
                },
                {
                    "name": "point2",
                    "description": "The ray ending point.",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Fixture"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1859,
            "description": "/** @type {number} */ var min_fraction = 1;\n\n/**\n * @private\n * @method  worldRayCastOneWrapper\n * @param {b2Fixture} fixture\n * @param {b2Vec2} point\n * @param {b2Vec2} normal\n * @param {number} fraction\n * @return {number}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1885,
            "description": "Return all fixtures to intersect raycast.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "rayCastAll",
            "params": [
                {
                    "name": "point1",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "point2",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "out",
                    "description": "",
                    "type": "Array.<b2Fixture>"
                }
            ],
            "return": {
                "description": "out",
                "type": "Array.<b2Fixture>"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1898,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "worldRayCastOneWrapper",
            "params": [
                {
                    "name": "fixture",
                    "description": "",
                    "type": "B2Fixture"
                },
                {
                    "name": "point",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "normal",
                    "description": "",
                    "type": "B2Vec2"
                },
                {
                    "name": "fraction",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1916,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "drawShape",
            "params": [
                {
                    "name": "fixture",
                    "description": "",
                    "type": "B2Fixture"
                },
                {
                    "name": "transform",
                    "description": "",
                    "type": "B2Transform"
                },
                {
                    "name": "color",
                    "description": "",
                    "type": "B2Color"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1925,
            "description": "switch (shape.m_type) {\n            case b2Shape.e_circleShape:\n            {\n                /** @type {b2CircleShape} */ var circle = shape instanceof b2CircleShape ? shape : null;\n        /** @type {b2Vec2} */ var center = b2Transform.timesV2( transform, circle.m_p, b2World._B2VEC2_POOL0 );\n                /** @type {number} */ var radius = circle.m_radius;\n                /** @type {b2Vec2} */ var axis = b2Vec2._UNITX;\n        this.m_debugDraw.drawSolidCircle( center, radius, axis, color );\n            }\n                break;\n    case b2Shape.e_edgeShape:\n            {\n                /** @type {b2EdgeShape} */ var edge = shape instanceof b2EdgeShape ? shape : null;\n                /** @type {b2Vec2} */ var v1 = b2Transform.timesV2( transform, edge.m_vertex1, b2World._B2VEC2_POOL0 );\n                /** @type {b2Vec2} */ var v2 = b2Transform.timesV2( transform, edge.m_vertex2, b2World._B2VEC2_POOL1 );\n                ///** @type {b2Vec2} */ var v1 = edge.m_vertex1;\n                ///** @type {b2Vec2} */ var v2 = edge.m_vertex2;\n                this.m_debugDraw.drawSegment( v1, v2, color );\n            }\n                break;\n    case b2Shape.e_chainShape:\n            {\n                /** @type {b2ChainShape} */ var chain = shape instanceof b2ChainShape ? shape : null;\n                /** @type {number} */ var count = chain.m_count;\n                /** Array.<b2Vec2> */var vertices = chain.m_vertices;\n        /** Array.<b2Vec2> */var v1 = b2Transform.timesV2( transform, vertices[0], b2World._B2VEC2_POOL0 );\n                /** b2Vec2 */var v2 = b2World._B2VEC2_POOL1;\n                this.m_debugDraw.drawCircle( v1, 0.05, color );\n                for (/** @type {number} */ var i = 1; i < count; ++i) {\n                    /** b2Vec2 */v2.equals( b2Transform.timesV2( transform, vertices[i] ) );\n                    this.m_debugDraw.drawSegment( v1, v2, color );\n                    this.m_debugDraw.drawCircle( v2, 0.05, color );\n                    v1.equals( v2 );\n                }\n            }\n                break;\n    case b2Shape.e_polygonShape:\n            {\n                /** @type {b2PolygonShape} */ var poly = shape instanceof b2PolygonShape ? shape : null;\n                /** @type {number} */ var vertexCount = poly.m_count;\n                /** @type {Array.<b2Vec2>} */var localVertices = poly.m_vertices;\n                /** @type {Array.<b2Vec2>} */var vertices = b2World._B2VEC2_VECTOR_MAX_POLYGON_VERTICES;\n        for (i = 0; i < vertexCount; ++i) {\n                    vertices[i].equals( b2Transform.timesV2( transform, localVertices[i] ) );\n                }\n                this.m_debugDraw.drawSolidPolygon( vertices, vertexCount, color );\n            }\n                break;\n        }\n    };\n\n    /**\n     * @public\n     * @method  drawJoint\n     * @param   {b2Joint} joint\n     * @return  {void}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 1992,
            "description": "/** @type {b2Body} */ var bodyB = joint.getBodyB();\n/** @type {b2Transform} */ var xf1 = bodyA.m_xf;\n/** @type {b2Transform} */ var xf2 = bodyB.m_xf;\n/** @type {b2Vec2} */ var x1 = xf1.p;\n/** @type {b2Vec2} */ var x2 = xf2.p;\n/** @type {b2Vec2} */ var p1 = joint.getAnchorA( b2World._B2VEC2_POOL0 );\n/** @type {b2Vec2} */ var p2 = joint.getAnchorB( b2World._B2VEC2_POOL1 );\n\n/** @type {b2Color} */ var color = b2World._B2COLOR_POOL0;\ncolor.setRGBA( 0.5, 0.8, 0.8 );\n\nswitch (joint.m_type) {\n    case b2Joint.e_distanceJoint:\n        this.m_debugDraw.drawSegment( p1, p2, color );\n        break;\n\n    case b2Joint.e_pulleyJoint:{\n        /** @type {b2PulleyJoint} */ var pulley = joint instanceof b2PulleyJoint ? joint : null;\n        /** @type {b2Vec2} */ var s1 = pulley.getGroundAnchorA( b2World._B2VEC2_POOL2 );\n        /** @type {b2Vec2} */ var s2 = pulley.getGroundAnchorB( b2World._B2VEC2_POOL3 );\n        this.m_debugDraw.drawSegment( s1, p1, color );\n        this.m_debugDraw.drawSegment( s2, p2, color );\n        this.m_debugDraw.drawSegment( s1, s2, color );\n    }\n        break;\n\n    case b2Joint.e_mouseJoint:\n        // don't draw this\n        this.m_debugDraw.drawSegment( p1, p2, color );\n        break;\n\n    default:\n        if ( bodyA != this.m_groundBody ) {\n            this.m_debugDraw.drawSegment( x1, p1, color );\n        }\n\n        this.m_debugDraw.drawSegment( p1, p2, color );\n\n        if ( bodyB != this.m_groundBody ) {\n            this.m_debugDraw.drawSegment( x2, p2, color );\n        }\n};\n    };",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2038,
            "access": "public",
            "tagname": "",
            "override": "",
            "itemtype": "method",
            "name": "drawParticleSystem",
            "params": [
                {
                    "name": "system",
                    "description": "",
                    "type": "B2ParticleSystem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2061,
            "description": "Call this to draw shapes and other debug draw data. This is intentionally non-const.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "drawDebugData",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2073,
            "description": "/** @type {b2Color} */ var color = b2World._B2COLOR_POOL0;\n\nif ( flags & b2Draw.e_shapeBit ) {\n    for (/** @type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n        /** @type {b2Transform} */ var xf = b.m_xf;\n\n        for (/** @type {b2Fixture} */ var f = b.getFixtureList(); f; f = f.m_next) {\n            if ( !b.isActive() ) {\n                color.setRGBA( 0.5, 0.5, 0.3 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( b.getType() === b2Body.b2_staticBody ) {\n                color.setRGBA( 0.5, 0.9, 0.5 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( b.getType() === b2Body.b2_kinematicBody ) {\n                color.setRGBA( 0.5, 0.5, 0.9 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( !b.isAwake() ) {\n                color.setRGBA( 0.6, 0.6, 0.6 );\n                this.drawShape( f, xf, color );\n            }\n            else {\n                color.setRGBA( 0.9, 0.7, 0.7 );\n                this.drawShape( f, xf, color );\n            }\n        }\n    }\n}",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2137,
            "description": "/** @type {Array.<b2Vec2>} */ var vs = b2World._B2VEC2_VECTOR_4;\n\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n    if ( !b.isActive() ) {\n        continue;\n    }\n\n    for (/* type {b2Fixture} */ var f = b.getFixtureList(); f; f = f.m_next) {\n        for (/** @type {number} */ var i = 0; i < f.m_proxyCount; ++i) {\n            /** @type {b2FixtureProxy} */ var proxy = f.m_proxies[i];\n\n            /** @type {b2AABB} */ var aabb = bp.getFatAABB( proxy.proxy );\n            vs[0].set( aabb.lowerBound.x, aabb.lowerBound.y );\n            vs[1].set( aabb.upperBound.x, aabb.lowerBound.y );\n            vs[2].set( aabb.upperBound.x, aabb.upperBound.y );\n            vs[3].set( aabb.lowerBound.x, aabb.upperBound.y );\n\n            this.m_debugDraw.drawPolygon( vs, 4, color );\n        }\n    }\n}\n        }\n\n        if ( flags & b2Draw.e_centerOfMassBit ) {\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2180,
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "setBroadPhase",
            "params": [
                {
                    "name": "broadPhase",
                    "description": "",
                    "type": "B2BroadPhase"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2200,
            "description": "Recommend a value to be used in `Step` for `particleIterations`.\nThis calculation is necessarily a simplification and should only be\nused as a starting point. Please see \"Particle Iterations\" in the\nProgrammer's Guide for details.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "calculateReasonableParticleIterations",
            "params": [
                {
                    "name": "timeStep",
                    "description": "Is the value to be passed into `Step`.",
                    "type": "Float"
                }
            ],
            "return": {
                "description": "Reasonable particle iterations",
                "type": "Int"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2218,
            "description": "for ( ; system !== null; system = system.m_next) {\n    smallestRadius = Math.min( smallestRadius, system.getRadius() );\n}\nreturn smallestRadius;\n        }\n\n        // Use the smallest radius, since that represents the worst-case.\n        return b2Particle.b2CalculateParticleIterations( this.m_gravity.length(), GetSmallestRadius( this ), timeStep );\n    };",
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2230,
            "description": "Get the number of broad-phase proxies.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getProxyCount",
            "return": {
                "description": "",
                "type": "Int"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2241,
            "description": "Get the height of the dynamic tree.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTreeHeight",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2252,
            "description": "Get the balance of the dynamic tree.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTreeBalance",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2263,
            "description": "Get the quality metric of the dynamic tree. The smaller the\nbetter. The minimum is 1.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "getTreeQuality",
            "return": {
                "description": "",
                "type": "Float"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2275,
            "description": "Shift the world origin. Useful for large worlds.\nThe body shift formula is: position -= newOrigin.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "shiftOrigin",
            "params": [
                {
                    "name": "newOrigin",
                    "description": "The new origin with respect to the old origin.",
                    "type": "B2Vec2"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2307,
            "description": "See\n<a href=../classes/b2Controller.html>b2Controller</a>\nlist.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "addController",
            "params": [
                {
                    "name": "controller",
                    "description": "",
                    "type": "B2Controller"
                }
            ],
            "return": {
                "description": "",
                "type": "B2Controller"
            },
            "class": "b2World",
            "module": "Dynamics"
        },
        {
            "file": "..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js",
            "line": 2333,
            "description": "See\n<a href=../classes/b2Controller.html>b2Controller</a>\nlist.",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "removeController",
            "return": {
                "description": "",
                "type": "B2Controller"
            },
            "class": "b2World",
            "module": "Dynamics"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:185"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:200"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:359"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:395"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:457"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js:430"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js:542"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js:585"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:269"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:403"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:497"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js:636"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js:815"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:248"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:298"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:311"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:324"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:338"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:425"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:434"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:443"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2Joint.js:456"
        },
        {
            "message": "unknown tag: virtual",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2JointFactory.js:118"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js:496"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js:594"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js:678"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js:137"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js:414"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js:501"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js:548"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js:696"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js:874"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js:1013"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js:471"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js:571"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js:612"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js:564"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js:686"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js:811"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js:435"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js:524"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js:570"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js:411"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js:531"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js:613"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:675"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:832"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:116"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:121"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:126"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:131"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:136"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:141"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:146"
        },
        {
            "message": "unknown tag: export",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:358"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:546"
        },
        {
            "message": "unknown tag: override",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:2038"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJoint.js:31"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2AreaJointDef.js:28"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js:30"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJoint.js:267"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2DistanceJointDef.js:33"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:30"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:248"
        },
        {
            "message": "Missing item type\n/**b2Vec2&*/var vA = data.velocities[this.m_indexA].v;\n/**float32*/var wA = data.velocities[this.m_indexA].w;\n\n//\t/*b2Vec2&*/ var cB = data.positions[this.m_indexB].c;\n/**float32*/var aB = data.positions[this.m_indexB].a;\n/**b2Vec2&*/var vB = data.velocities[this.m_indexB].v;\n/**float32*/var wB = data.velocities[this.m_indexB].w;\n\n//\t/*b2Rot*/ var qA = new b2Rot(aA), /*b2Rot*/ qB = new b2Rot(aB);\nvar qA = this.m_qA.setAngle( aA ), qB = this.m_qB.setAngle( aB );\n\n// Compute the effective mass matrix.\n//\tm_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\nb2Vec2.subtract( this.m_localAnchorA, this.m_localCenterA, this.m_lalcA );\nvar rA = b2Rot.timesV2( qA, this.m_lalcA, this.m_rA );\n//\tm_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\nb2Vec2.subtract( this.m_localAnchorB, this.m_localCenterB, this.m_lalcB );\nvar rB = b2Rot.timesV2( qB, this.m_lalcB, this.m_rB );\n\n// J = [-I -r1_skew I r2_skew]\n//     [ 0       -1 0       1]\n// r_skew = [-ry; rx]\n\n// Matlab\n// K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\n//     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\n//     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\n\n/*float32*/var mA = this.m_invMassA, mB = this.m_invMassB;\n/*float32*/var iA = this.m_invIA, iB = this.m_invIB;\n\n/*b2Mat22*/var K = this.m_K; //new b2Mat22();\nK.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\nK.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\nK.ey.x = K.ex.y;\nK.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\nK.getInverse( this.m_linearMass );\n\nthis.m_angularMass = iA + iB;\nif ( this.m_angularMass > 0 ) {\n    this.m_angularMass = 1 / this.m_angularMass;\n}\n\nif ( data.step.warmStarting ) {\n    // Scale impulses to support a variable time step.\n    // m_linearImpulse *= data.step.dtRatio;\n    this.m_linearImpulse.times( data.step.dtRatio );\n    this.m_angularImpulse *= data.step.dtRatio;\n\n    // /*b2Vec2*/ var P(m_linearImpulse.x, m_linearImpulse.y);",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:422"
        },
        {
            "message": "Missing item type\n// Solve angular friction\n        {\n            /**float32*/var Cdot = wB - wA;\n            /**float32*/var impulse = (-this.m_angularMass * Cdot);\n    /**float32*/var oldImpulse = this.m_angularImpulse;\n            /**float32*/var maxImpulse = h * this.m_maxTorque;\n            this.m_angularImpulse = b2Math.clamp( this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse );\n            impulse = this.m_angularImpulse - oldImpulse;\n    wA -= iA * impulse;\n            wB += iB * impulse;\n        }\n// Solve linear friction\n        {\n            // b2Vec2 Cdot = vB + b2Cross(wB, m_rB) - vA - b2Cross(wA, m_rA);\n            Cdot = b2Vec2.subtract(\n                b2Vec2.vPlusCrossFV( vB, wB, this.m_rB, b2Vec2.POOL0 ),\n                b2Vec2.vPlusCrossFV( vA, wA, this.m_rA, b2Vec2.POOL1 ),\n                b2FrictionJoint._B2VEC2_POOL0 );\n    // b2Vec2 impulse = -b2Mul(m_linearMass, Cdot);\n            var impulseV = b2Mat22.timesV2( this.m_linearMass, Cdot, b2FrictionJoint._B2VEC2_POOL1 ).negative();\n            // b2Vec2 oldImpulse = m_linearImpulse;\n            var oldImpulseV = b2FrictionJoint._B2VEC2_POOL3.copy( this.m_linearImpulse );\n            // m_linearImpulse += impulse;\n            this.m_linearImpulse.plus( impulseV );\n    maxImpulse = h * this.m_maxForce;\n    if ( this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse ) {\n                this.m_linearImpulse.norm();\n                this.m_linearImpulse.times( maxImpulse );\n            }\n    // impulse = m_linearImpulse - oldImpulse;\n            b2Vec2.subtract( this.m_linearImpulse, oldImpulseV, impulseV );\n    // vA -= mA * impulse;\n            vA.minusEqualsMul( mA, impulseV );\n            // wA -= iA * b2Cross(m_rA, impulse);\n            wA -= iA * b2Vec2.cross( this.m_rA, impulseV );\n    // vB += mB * impulse;\n            vB.plusEqualsMul( mB, impulseV );\n            // wB += iB * b2Cross(m_rB, impulse);\n            wB += iB * b2Vec2.cross( this.m_rB, impulseV );\n        }\n        // data.velocities[this.m_indexA].v = vA;\n        data.velocities[this.m_indexA].w = wA;\n        // data.velocities[this.m_indexB].v = vB;\n        data.velocities[this.m_indexB].w = wB;\n    };",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJoint.js:515"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2FrictionJointDef.js:27"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js:37"
        },
        {
            "message": "Missing item type\n/**float32*/var aA = this.m_bodyA.m_sweep.a;\n        /**b2Transform*/var xfC = this.m_bodyC.m_xf;\n/**float32*/var aC = this.m_bodyC.m_sweep.a;\n\n        if ( this.m_typeA === b2Joint.e_revoluteJoint ) {\n/**b2RevoluteJoint*/var revolute = gearJointDef.joint1;\nthis.m_localAnchorC.copy( revolute.m_localAnchorA );\nthis.m_localAnchorA.copy( revolute.m_localAnchorB );\nthis.m_referenceAngleA = revolute.m_referenceAngle;\nthis.m_localAxisC.setZero();\n\ncoordinateA = aA - aC - this.m_referenceAngleA;\n        }\n        else {\n/*b2PrismaticJoint*/var prismatic = gearJointDef.joint1;\nthis.m_localAnchorC.copy( prismatic.m_localAnchorA );\nthis.m_localAnchorA.copy( prismatic.m_localAnchorB );\nthis.m_referenceAngleA = prismatic.m_referenceAngle;\nthis.m_localAxisC.copy( prismatic.m_localXAxisA );\n\n// b2Vec2 pC = m_localAnchorC;\nvar pC = this.m_localAnchorC;\n// b2Vec2 pA = b2MulT(xfC.q, b2Mul(xfA.q, m_localAnchorA) + (xfA.p - xfC.p));\nvar pA = b2Rot.invRotV2(\n    xfC.q,\n    b2Vec2.add(\n        b2Rot.timesV2( xfA.q, this.m_localAnchorA, b2Vec2.POOL0 ),\n        b2Vec2.subtract( xfA.p, xfC.p, b2Vec2.POOL1 ),\n        b2Vec2.POOL0 ),\n    b2Vec2.POOL0 ); // pA uses s_t0\n//\t\tcoordinateA = b2Dot(pA - pC, m_localAxisC);\ncoordinateA = b2Vec2.dot( b2Vec2.subtract( pA, pC, b2Vec2.POOL0 ), this.m_localAxisC );\n        }\n\n        // Get geometry of joint2\n        /*b2Transform*/var xfB = this.m_bodyB.m_xf;\n/*float32*/var aB = this.m_bodyB.m_sweep.a;\n        /*b2Transform*/var xfD = this.m_bodyD.m_xf;\n/*float32*/var aD = this.m_bodyD.m_sweep.a;\n\n        if ( this.m_typeB === b2Joint.e_revoluteJoint ) {\n/*b2RevoluteJoint*/var revolute = gearJointDef.joint2;\nthis.m_localAnchorD.copy( revolute.m_localAnchorA );\nthis.m_localAnchorB.copy( revolute.m_localAnchorB );\nthis.m_referenceAngleB = revolute.m_referenceAngle;\nthis.m_localAxisD.setZero();\ncoordinateB = aB - aD - this.m_referenceAngleB;\n        }\n        else {\n/*b2PrismaticJoint*/var prismatic = gearJointDef.joint2;\nthis.m_localAnchorD.copy( prismatic.m_localAnchorA );\nthis.m_localAnchorB.copy( prismatic.m_localAnchorB );\nthis.m_referenceAngleB = prismatic.m_referenceAngle;\nthis.m_localAxisD.copy( prismatic.m_localXAxisA );\n\n// b2Vec2 pD = m_localAnchorD;\nvar pD = this.m_localAnchorD;\n// b2Vec2 pB = b2MulT(xfD.q, b2Mul(xfB.q, m_localAnchorB) + (xfB.p - xfD.p));\nvar pB = b2Rot.invRotV2(\n    xfD.q,\n    b2Vec2.add(\n        b2Rot.timesV2( xfB.q, this.m_localAnchorB, b2Vec2.POOL0 ),\n        b2Vec2.subtract( xfB.p, xfD.p, b2Vec2.POOL1 ),\n        b2Vec2.POOL0 ),\n    b2Vec2.POOL0 );\n// coordinateB = b2Dot(pB - pD, m_localAxisD);\ncoordinateB = b2Vec2.dot( b2Vec2.subtract( pB, pD, b2Vec2.POOL0 ), this.m_localAxisD );\n        }\n        this.m_ratio = gearJointDef.ratio;\n        this.m_constant = coordinateA + this.m_ratio * coordinateB;\n        this.m_impulse = 0;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n//                  ██       ██               ██  ██                                              //\n//                  ██       ██                   ██                                              //\n//                  ██ █████ █████ █████ ████ ██ █████ █████ █████ █████ █████                    //\n//                  ██ ██ ██ ██ ██ ██ ██ ██   ██  ██      ██ ██ ██ ██    ██ ██                    //\n//                  ██ ██ ██ ██ ██ █████ ██   ██  ██   █████ ██ ██ ██    █████                    //\n//                  ██ ██ ██ ██ ██ ██    ██   ██  ██   ██ ██ ██ ██ ██    ██                       //\n//                  ██ ██ ██ ██ ██ █████ ██   ██  ████ █████ ██ ██ █████ █████                    //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    } b2GearJoint.prototype = p = new b2Joint; Box2D.b2GearJoint = b2GearJoint;\n\n // STATIC CLASS PROPERTIES\n\n    /**\n     * Object pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js:524"
        },
        {
            "message": "Missing item type\n/**b2Vec2&*/var vA = data.velocities[this.m_indexA].v;\n/**float32*/var wA = data.velocities[this.m_indexA].w;\n\n/**float32*/var aB = data.positions[this.m_indexB].a;\n/**b2Vec2&*/var vB = data.velocities[this.m_indexB].v;\n/**float32*/var wB = data.velocities[this.m_indexB].w;\n\n/**float32*/var aC = data.positions[this.m_indexC].a;\n/**b2Vec2&*/var vC = data.velocities[this.m_indexC].v;\n/**float32*/var wC = data.velocities[this.m_indexC].w;\n\n/**float32*/var aD = data.positions[this.m_indexD].a;\n/**b2Vec2&*/var vD = data.velocities[this.m_indexD].v;\n/**float32*/var wD = data.velocities[this.m_indexD].w;\n\n// b2Rot qA(aA), qB(aB), qC(aC), qD(aD);\nvar qA = this.m_qA.setAngle( aA ),\n    qB = this.m_qB.setAngle( aB ),\n    qC = this.m_qC.setAngle( aC ),\n    qD = this.m_qD.setAngle( aD );\n\nthis.m_mass = 0;\n\nif ( this.m_typeA === b2Joint.e_revoluteJoint ) {\n    this.m_JvAC.setZero();\n    this.m_JwA = 1;\n    this.m_JwC = 1;\n    this.m_mass += this.m_iA + this.m_iC;\n}\nelse {\n    // b2Vec2 u = b2Mul(qC, m_localAxisC);\n    var u = b2Rot.timesV2( qC, this.m_localAxisC, b2GearJoint._B2VEC2_POOL1 );\n    // b2Vec2 rC = b2Mul(qC, m_localAnchorC - m_lcC);\n    b2Vec2.subtract( this.m_localAnchorC, this.m_lcC, this.m_lalcC );\n    var rC = b2Rot.timesV2( qC, this.m_lalcC, b2GearJoint._B2VEC2_POOL2 );\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_lcA);\n    b2Vec2.subtract( this.m_localAnchorA, this.m_lcA, this.m_lalcA );\n    var rA = b2Rot.timesV2( qA, this.m_lalcA, b2GearJoint._B2VEC2_POOL2 );\n    // m_JvAC = u;\n    this.m_JvAC.copy( u );\n    // m_JwC = b2Cross(rC, u);\n    this.m_JwC = b2Vec2.cross( rC, u );\n    // m_JwA = b2Cross(rA, u);\n    this.m_JwA = b2Vec2.cross( rA, u );\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n}\n\nif ( this.m_typeB === b2Joint.e_revoluteJoint ) {\n    this.m_JvBD.setZero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n}\nelse {\n    // b2Vec2 u = b2Mul(qD, m_localAxisD);\n    var u = b2Rot.timesV2( qD, this.m_localAxisD, b2GearJoint._B2VEC2_POOL3 );\n    // b2Vec2 rD = b2Mul(qD, m_localAnchorD - m_lcD);\n    b2Vec2.subtract( this.m_localAnchorD, this.m_lcD, this.m_lalcD );\n    var rD = b2Rot.timesV2( qD, this.m_lalcD, b2GearJoint._B2VEC2_POOL4 );\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_lcB);\n    b2Vec2.subtract( this.m_localAnchorB, this.m_lcB, this.m_lalcB );\n    var rB = b2Rot.timesV2( qB, this.m_lalcB, b2GearJoint._B2VEC2_POOL5 );\n    // m_JvBD = m_ratio * u;\n    b2Vec2.numTimes( this.m_ratio, u, this.m_JvBD );\n    // m_JwD = m_ratio * b2Cross(rD, u);\n    this.m_JwD = this.m_ratio * b2Vec2.cross( rD, u );\n    // m_JwB = m_ratio * b2Cross(rB, u);\n    this.m_JwB = this.m_ratio * b2Vec2.cross( rB, u );\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n}\n\n// Compute effective mass.\nthis.m_mass = this.m_mass > 0 ? 1 / this.m_mass : 0;\n\nif ( data.step.warmStarting ) {\n    // vA += (m_mA * m_impulse) * m_JvAC;\n    vA.plusEqualsMul( this.m_mA * this.m_impulse, this.m_JvAC );\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    // vB += (m_mB * m_impulse) * m_JvBD;\n    vB.plusEqualsMul( this.m_mB * this.m_impulse, this.m_JvBD );\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    // vC -= (m_mC * m_impulse) * m_JvAC;\n    vC.minusEqualsMul( this.m_mC * this.m_impulse, this.m_JvAC );\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n    // vD -= (m_mD * m_impulse) * m_JvBD;\n    vD.minusEqualsMul( this.m_mD * this.m_impulse, this.m_JvBD );\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n}\nelse {\n    this.m_impulse = 0;\n}\n// data.velocities[this.m_indexA].v = vA;\ndata.velocities[this.m_indexA].w = wA;\n// data.velocities[this.m_indexB].v = vB;\ndata.velocities[this.m_indexB].w = wB;\n// data.velocities[this.m_indexC].v = vC;\ndata.velocities[this.m_indexC].w = wC;\n// data.velocities[this.m_indexD].v = vD;\ndata.velocities[this.m_indexD].w = wD;\n    };\n\n    /**\n     *\n     * @public\n     * @override\n     * @method  solveVelocityConstraints\n     * @param   {b2SolverData} data\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJoint.js:662"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2GearJointDef.js:28"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js:31"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJoint.js:283"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js:27"
        },
        {
            "message": "Missing item type\n/** @type {number} */ var angleB = this.bodyB.getAngle();\nthis.angularOffset = angleB - angleA;\n    };",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MotorJointDef.js:150"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js:35"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJoint.js:244"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2MouseJointDef.js:28"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js:32"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJoint.js:377"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PrismaticJointDef.js:34"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js:38"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJoint.js:307"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2PulleyJointDef.js:30"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js:36"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJoint.js:296"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RevoluteJointDef.js:39"
        },
        {
            "message": "Missing item type\nInvoke parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js:45"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJoint.js:306"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2RopeJointDef.js:33"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js:30"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJoint.js:254"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WeldJointDef.js:30"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:27"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:409"
        },
        {
            "message": "Missing item type\n/**b2Body*/ var bB = this.m_bodyB;\n/**b2Vec2*/ var pA = bA.getWorldPoint(this.m_localAnchorA, b2WheelJoint._B2VEC2_POOL0);\n/**b2Vec2*/ var pB = bB.getWorldPoint(this.m_localAnchorB, b2WheelJoint._B2VEC2_POOL1);\n/**b2Vec2*/ var d = b2Vec2.subtract(pB, pA, b2WheelJoint._B2VEC2_POOL2);\n/**b2Vec2*/ var axis = bA.getWorldVector(this.m_localXAxisA, b2WheelJoint._B2VEC2_POOL3);\n/**float32*/var translation = b2Vec2.dot(d, axis);\nreturn translation;\n    };\n\n    /**\n     * @public\n     * @method  getJointSpeed\n     * @return  {float}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:530"
        },
        {
            "message": "Missing item type\n/**float*/ var impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\nthis.m_springImpulse += impulse;\n\n// b2Vec2 P = impulse * m_ax;\n/**b2Vec2*/var P = b2Vec2.numTimes(impulse, this.m_ax, b2WheelJoint._B2VEC2_POOL0);\n/**float*/var LA = impulse * this.m_sAx;\n/**float*/var LB = impulse * this.m_sBx;\n\n// vA -= mA * P;\nvA.minusEqualsMul(mA, P);\nwA -= iA * LA;\n\n// vB += mB * P;\nvB.plusEqualsMul(mB, P);\nwB += iB * LB;\n        }\n\n// Solve rotational motor constraint\n        {\nCdot = wB - wA - this.m_motorSpeed;\nimpulse = -this.m_motorMass * Cdot;\n\n/**float*/ var oldImpulse = this.m_motorImpulse;\n/**float*/ var maxImpulse = data.step.dt * this.m_maxMotorTorque;\nthis.m_motorImpulse = b2Math.clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\nimpulse = this.m_motorImpulse - oldImpulse;\n\nwA -= iA * impulse;\nwB += iB * impulse;\n        }\n\n        // Solve point to line constraint\n        {\nCdot = b2Vec2.dot(this.m_ay, b2Vec2.subtract(vB, vA, b2Vec2.POOL0)) + this.m_sBy * wB - this.m_sAy * wA;\nimpulse = -this.m_mass * Cdot;\nthis.m_impulse += impulse;\n\n// b2Vec2 P = impulse * m_ay;\nP = b2Vec2.numTimes(impulse, this.m_ay, b2WheelJoint._B2VEC2_POOL0);\nLA = impulse * this.m_sAy;\nLB = impulse * this.m_sBy;\n\n// vA -= mA * P;\nvA.minusEqualsMul(mA, P);\nwA -= iA * LA;\n\n// vB += mB * P;\nvB.plusEqualsMul(mB, P);\nwB += iB * LB;\n        }\n\n        // data.velocities[this.m_indexA].v = vA;\n        data.velocities[this.m_indexA].w = wA;\n        // data.velocities[this.m_indexB].v = vB;\n        data.velocities[this.m_indexB].w = wB;\n    };\n\n    /**\n     * @public\n     * @override\n     * @method  solvePositionConstraints\n     * @param   {b2SolverData} data\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJoint.js:852"
        },
        {
            "message": "Missing item type\nInvokes parent class constructor function reference.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\Joints\\b2WheelJointDef.js:33"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:116"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:121"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:126"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:131"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:136"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:141"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:146"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:358"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:548"
        },
        {
            "message": "Missing item type\nwhile (ce) {\n    /** @type {b2ContactEdge} */ var ce0 = ce;\n    ce = ce.next;\n    this.m_world.m_contactManager.destroy( ce0.contact );\n}\nthis.m_contactList = null;\n\n// Touch the proxies so that new contacts will be created (when appropriate)\n/** @type {b2BroadPhase} */ var broadPhase = this.m_world.m_contactManager.m_broadPhase;\nfor (/** @type {b2Fixture} */ var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n        broadPhase.touchProxy( f.m_proxies[i].proxy );\n    }\n}\n     };\n\n     /**\n      * Get the type of this body.\n      *\n      * @public\n      * @method  getType\n      * @return  {int} body type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2Body.js:1509"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:145"
        },
        {
            "message": "Missing item type",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:149"
        },
        {
            "message": "Missing item type\nThese are for debugging the solver.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:195"
        },
        {
            "message": "Missing item type\nObject pool for memory management.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:236"
        },
        {
            "message": "Missing item type\n// Add to world doubly linked list.\n        b.m_prev = null;\n        b.m_next = this.m_bodyList;\n        if ( this.m_bodyList ) {\n            this.m_bodyList.m_prev = b;\n        }\n        this.m_bodyList = b;\n        ++this.m_bodyCount;\nreturn b;\n    };\n\n    /**\n     * Destroy a rigid body.</br></br>\n     *\n     *  Warning: This automatically deletes all associated shapes and joints.</br>\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  destroyBody\n     * @param   {b2Body}    body\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:656"
        },
        {
            "message": "Missing item type\nwhile (je) {\n    /** @type {b2JointEdge} */ var je0 = je;\n    je = je.next;\n\n    if ( this.m_destructionListener ) {\n        this.m_destructionListener.sayGoodbyeJoint( je0.joint );\n    }\n\n    this.destroyJoint( je0.joint );\n\n    body.m_jointList = je;\n}\nbody.m_jointList = null;",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:697"
        },
        {
            "message": "Missing item type\nwhile (coe) {\n    /** @type {b2ControllerEdge} */ var coe0 = coe;\n    coe = coe.nextController;\n    coe0.controller.removeBody( body );\n}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:714"
        },
        {
            "message": "Missing item type\nwhile (ce) {\n    /** @type {b2ContactEdge} */ var ce0 = ce;\n    ce = ce.next;\n    this.m_contactManager.destroy( ce0.contact );\n}\nbody.m_contactList = null;\n\n// Delete the attached fixtures. This destroys broad-phase proxies.\n/** @type {b2Fixture} */ var f = body.m_fixtureList;\nwhile (f) {\n    /** @type {b2Fixture} */ var f0 = f;\n    f = f.m_next;\n\n    if ( this.m_destructionListener ) {\n        this.m_destructionListener.sayGoodbyeFixture( f0 );\n    }\n\n    f0.destroyProxies( this.m_contactManager.m_broadPhase );\n    f0.destroy();\n\n\n    body.m_fixtureList = f;\n    body.m_fixtureCount -= 1;\n}\nbody.m_fixtureList = null;\nbody.m_fixtureCount = 0;\n\n// Remove world body list.\nif ( body.m_prev ) {\n    body.m_prev.m_next = body.m_next;\n}\n\nif ( body.m_next ) {\n    body.m_next.m_prev = body.m_prev;\n}\n\nif ( body === this.m_bodyList ) {\n    this.m_bodyList = body.m_next;\n}\n\n--this.m_bodyCount;\n    };\n\n    /**\n     * Create a joint to constrain bodies together. No reference to the definition\n     * is retained. This may cause the connected bodies to cease colliding.</br></br>\n     *\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  createJoint\n     * @param   {b2JointDef}  jointDef\n     * @return  {b2Joint}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:722"
        },
        {
            "message": "Missing item type\n// Connect to the world list.\n        j.m_prev = null;\n        j.m_next = this.m_jointList;\n        if ( this.m_jointList ) {\n            this.m_jointList.m_prev = j;\n        }\n        this.m_jointList = j;\n        ++this.m_jointCount;\n// Connect to the bodies' doubly linked lists.\n        j.m_edgeA.joint = j;\n        j.m_edgeA.other = j.m_bodyB;\n        j.m_edgeA.prev = null;\n        j.m_edgeA.next = j.m_bodyA.m_jointList;\n        if ( j.m_bodyA.m_jointList ) j.m_bodyA.m_jointList.prev = j.m_edgeA;\n        j.m_bodyA.m_jointList = j.m_edgeA;\nj.m_edgeB.joint = j;\n        j.m_edgeB.other = j.m_bodyA;\n        j.m_edgeB.prev = null;\n        j.m_edgeB.next = j.m_bodyB.m_jointList;\n        if ( j.m_bodyB.m_jointList ) j.m_bodyB.m_jointList.prev = j.m_edgeB;\n        j.m_bodyB.m_jointList = j.m_edgeB;\n/** @type {b2Body} */ var bodyA = jointDef.bodyA;\n        /** @type {b2Body} */ var bodyB = jointDef.bodyB;\n// If the joint prevents collisions, then flag any contacts for filtering.\n        if ( !jointDef.collideConnected ) {\n            /** @type {b2ContactEdge} */ var edge = bodyB.getContactList();\n            while (edge) {\n                if ( edge.other === bodyA ) {\n                    // Flag the contact for filtering at the next time step (where either\n                    // body is awake).\n                    edge.contact.flagForFiltering();\n                }\n        edge = edge.next;\n            }\n        }\n// Note: creating a joint doesn't wake the bodies.\nreturn j;\n    };\n\n    /**\n     *  Destroy a joint. This may cause the connected bodies to begin colliding.</br></br>\n     *\n     *  Warning: This function is locked during callbacks.</br>\n     *    NOTE:  However using the\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS framework</a>\n     *           event listeners you can do what every you want whenever you want and\n     *           <a href=https://github.com/SmartArtsStudio/addPhysicsJS>addPhysicsJS</a>\n     *           manages the locked world problems for you.\n     *\n     * @public\n     * @method  destroyJoint\n     * @param   {b2Joint}   joint\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:791"
        },
        {
            "message": "Missing item type\n// Remove from the doubly linked list.\n        if ( joint.m_prev ) {\n            joint.m_prev.m_next = joint.m_next;\n        }\nif ( joint.m_next ) {\n            joint.m_next.m_prev = joint.m_prev;\n        }\nif ( joint === this.m_jointList ) {\n            this.m_jointList = joint.m_next;\n        }\n// Disconnect from island graph.\n        /** @type {b2Body} */ var bodyA = joint.m_bodyA;\n        /** @type {b2Body} */ var bodyB = joint.m_bodyB;\n// Wake up connected bodies.\n        bodyA.setAwake( true );\n        bodyB.setAwake( true );\n// Remove from body 1.\n        if ( joint.m_edgeA.prev ) {\n            joint.m_edgeA.prev.next = joint.m_edgeA.next;\n        }\nif ( joint.m_edgeA.next ) {\n            joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n        }\nif ( joint.m_edgeA === bodyA.m_jointList ) {\n            bodyA.m_jointList = joint.m_edgeA.next;\n        }\njoint.m_edgeA.prev = null;\n        joint.m_edgeA.next = null;\n// Remove from body 2\n        if ( joint.m_edgeB.prev ) {\n            joint.m_edgeB.prev.next = joint.m_edgeB.next;\n        }\nif ( joint.m_edgeB.next ) {\n            joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n        }\nif ( joint.m_edgeB === bodyB.m_jointList ) {\n            bodyB.m_jointList = joint.m_edgeB.next;\n        }\njoint.m_edgeB.prev = null;\n        joint.m_edgeB.next = null;\nb2JointFactory.destroy( joint, null );",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:863"
        },
        {
            "message": "Missing item type\nwhile (edge) {\n    if ( edge.other === bodyA ) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n}\n        }\n    };",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:927"
        },
        {
            "message": "Missing item type\nisland.initialize( this.m_bodyCount,\n    this.m_contactManager.m_contactCount,\n    this.m_jointCount,\n    null, // this.m_stackAllocator,\n    this.m_contactManager.m_contactListener );\n\n// Clear all the island flags.\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_flag_islandFlag = false;\n}\nfor (/** @type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n    c.m_flag_islandFlag = false;\n}\nfor (/** @type {b2Joint} */ var j = this.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n}\n\n// Build and simulate all awake islands.\n/** @type {number} */ var stackSize = this.m_bodyCount;\n/** @type {Array.<?b2Body>} */ var stack = this.s_stack;\nfor (/** @type {b2Body} */ var seed = this.m_bodyList; seed; seed = seed.m_next) {\n    if ( seed.m_flag_islandFlag ) {\n        continue;\n    }\n\n    if ( !seed.isAwake() || !seed.isActive() ) {\n        continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if ( seed.getType() === b2Body.b2_staticBody ) {\n        continue;\n    }\n\n    // Reset island and stack.\n    island.clear();\n    /** @type {number} */ var stackCount = 0;\n    stack[stackCount++] = seed;\n    seed.m_flag_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stackCount > 0) {\n        // Grab the next body off the stack and add it to the island.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1045"
        },
        {
            "message": "Missing item type\n// Has this contact already been added to an island?\n                    if ( contact.m_flag_islandFlag ) {\n                        continue;\n                    }\n// Is this contact solid and touching?\n                    if ( !contact.isEnabled() || !contact.isTouching() ) {\n                        continue;\n                    }\n// Skip sensors.\n                    /** @type {boolean} */ var sensorA = contact.m_fixtureA.m_isSensor;\n                    /** @type {boolean} */ var sensorB = contact.m_fixtureB.m_isSensor;\n                    if ( sensorA || sensorB ) {\n                        continue;\n                    }\nisland.addContact( contact );\n                    contact.m_flag_islandFlag = true;\n/** @type {b2Body} */ var other = ce.other;\n// Was the other body already added to this island?\n                    if ( other.m_flag_islandFlag ) {\n                        continue;\n                    }",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1108"
        },
        {
            "message": "Missing item type\nisland.solve( profile, step, this.m_gravity, this.m_allowSleep );\nthis.m_profile.solveInit += profile.solveInit;\nthis.m_profile.solveVelocity += profile.solveVelocity;\nthis.m_profile.solvePosition += profile.solvePosition;\n\n// Post solve cleanup.\nfor (/** @type {number} */ var i = 0; i < island.m_bodyCount; ++i) {\n    // Allow static bodies to participate in other islands.",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1173"
        },
        {
            "message": "Missing item type\n// Synchronize fixtures, check for out of range bodies.\n            for (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n                // If a body was not in an island then it did not move.\n                if ( !b.m_flag_islandFlag ) {\n                    continue;\n                }\n    if ( b.getType() === b2Body.b2_staticBody ) {\n                    continue;\n                }\n    // Update fixtures (for broad-phase).\n                b.synchronizeFixtures();\n            }\n// Look for new contacts.\n            this.m_contactManager.findNewContacts();\n            this.m_profile.broadphase = timer.getMilliseconds();\n        }\n    };\n\n    /**\n     * Find Time Of Impact contacts and solve them.\n     *\n     * @public\n     * @method  solveTOI\n     * @param   {b2TimeStep} step\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1196"
        },
        {
            "message": "Missing item type\nisland.initialize( 2 * b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIContactsPerIsland, 0, null, this.m_contactManager.m_contactListener );\n\nif ( this.m_stepComplete ) {\n    for (/** @type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n        b.m_flag_islandFlag = false;\n        b.m_sweep.alpha0 = 0;\n    }\n\n    for (/** @type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Invalidate TOI\n        c.m_flag_toiFlag = c.m_flag_islandFlag = false;\n        c.m_toiCount = 0;\n        c.m_toi = 1;\n    }\n}\n\n// Find TOI events and solve them.\nfor (; ;) {\n    // Find the first TOI.\n    /** @type {b2Contact} */ var minContact = null;\n    /** @type {number} */ var minAlpha = 1;\n\n    for (/* type {b2Contact} */ var c = this.m_contactManager.m_contactList; c; c = c.m_next) {\n        // Is this contact disabled?\n        if ( !c.isEnabled() ) {\n            continue;\n        }\n\n        // Prevent excessive sub-stepping.\n        if ( c.m_toiCount > b2Settings.b2_maxSubSteps ) {\n            continue;\n        }\n\n        /** @type {number} */ var alpha = 1;\n        if ( c.m_flag_toiFlag ) {\n            // This contact has a valid cached TOI.\n            alpha = c.m_toi;\n        }\n        else {\n            /** @type {b2Fixture} */ var fA = c.getFixtureA();\n            /** @type {b2Fixture} */ var fB = c.getFixtureB();\n\n            // Is there a sensor?\n            if ( fA.isSensor() || fB.isSensor() ) {\n                continue;\n            }\n\n            /** @type {b2Body} */ var bA = fA.getBody();\n            /** @type {b2Body} */ var bB = fB.getBody();\n\n            /** @type {b2BodyType} */ var typeA = bA.m_type;\n            /** @type {b2BodyType} */ var typeB = bB.m_type;",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1229"
        },
        {
            "message": "Missing item type\n/** @type {boolean} */ var activeB = bB.isAwake() && typeB !== b2Body.b2_staticBody;\n\n// Is at least one body active (awake and dynamic or kinematic)?\nif ( !activeA && !activeB ) {\n    continue;\n}\n\n/** @type {boolean} */ var collideA = bA.isBullet() || typeA !== b2Body.b2_dynamicBody;\n/** @type {boolean} */ var collideB = bB.isBullet() || typeB !== b2Body.b2_dynamicBody;\n\n// Are these two non-bullet dynamic bodies?\nif ( !collideA && !collideB ) {\n    continue;\n}\n\n// Compute the TOI for this contact.\n// Put the sweeps onto the same time interval.\n/** @type {number} */ var alpha0 = bA.m_sweep.alpha0;\n\nif ( bA.m_sweep.alpha0 < bB.m_sweep.alpha0 ) {\n    alpha0 = bB.m_sweep.alpha0;\n    bA.m_sweep.advance( alpha0 );\n}\nelse if ( bB.m_sweep.alpha0 < bA.m_sweep.alpha0 ) {\n    alpha0 = bA.m_sweep.alpha0;\n    bB.m_sweep.advance( alpha0 );\n}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1287"
        },
        {
            "message": "Missing item type\n/** @type {number} */ var indexB = c.getChildIndexB();\n\n// Compute the time of impact in interval [0, minTOI]\n/** @type {b2TOIInput} */ var input = b2World._B2TOI_INPUT_POOL0;\ninput.proxyA.setShape( fA.getShape(), indexA );\ninput.proxyB.setShape( fB.getShape(), indexB );\ninput.sweepA.copy( bA.m_sweep );\ninput.sweepB.copy( bB.m_sweep );\ninput.tMax = 1;\n\n/** @type {b2TOIOutput} */ var output = b2World._B2TOI_OUTPUT_POOL0;\nb2Collision.timeOfImpact( output, input );\n\n// Beta is the fraction of the remaining portion of the .\n/** @type {number} */ var beta = output.t;\nif ( output.state === b2TOIOutput.e_touching ) {\n    alpha = Math.min( alpha0 + (1 - alpha0) * beta, 1 );\n}\nelse {\n    alpha = 1;\n}\n\nc.m_toi = alpha;\nc.m_flag_toiFlag = true;\n                }\n\n                if ( alpha < minAlpha ) {\n// This is the minimum TOI found so far.\nminContact = c;\nminAlpha = alpha;\n                }\n            }\n\n            if ( minContact === null || 1 - 10 * b2Settings.b2_epsilon < minAlpha ) {\n                // No more TOI events. Done!\n                this.m_stepComplete = true;\n                break;\n            }\n\n            // Advance the bodies to the TOI.\n            /* type {b2Fixture} */var fA = minContact.getFixtureA();\n            /* type {b2Fixture} */var fB = minContact.getFixtureB();\n            /* type {b2Body} */var bA = fA.getBody();\n            /* type {b2Body} */var bB = fB.getBody();\n\n            /** @type {b2Sweep} */ var backup1 = b2World._B2SWEEP_POOL1.copy( bA.m_sweep );\n            /** @type {b2Sweep} */ var backup2 = b2World._B2SWEEP_POOL2.copy( bB.m_sweep );\n\n            bA.advance( minAlpha );\n            bB.advance( minAlpha );\n\n            // The TOI contact likely has some new contact points.\n            minContact.update( this.m_contactManager.m_contactListener );\n            minContact.m_flag_toiFlag = false;\n            ++minContact.m_toiCount;\n\n            // Is the contact solid?\n            if ( !minContact.isEnabled() || !minContact.isTouching() ) {\n                // Restore the sweeps.\n                minContact.setEnabled( false );\n                bA.m_sweep.copy( backup1 );\n                bB.m_sweep.copy( backup2 );\n                bA.synchronizeTransform();\n                bB.synchronizeTransform();\n                continue;\n            }\n\n            bA.setAwake( true );\n            bB.setAwake( true );\n\n            // Build the island\n            island.clear();\n            island.addBody( bA );\n            island.addBody( bB );\n            island.addContact( minContact );\n\n            bA.m_flag_islandFlag = true;\n            bB.m_flag_islandFlag = true;\n            minContact.m_flag_islandFlag = true;\n\n            // Get contacts on bodyA and bodyB.\n            //** @type {b2Body} */ var bodies = [bA, bB];\n            for (/** @type {number} */ var i = 0; i < 2; ++i) {\n                /** @type {b2Body} */ var body = (i === 0) ? (bA) : (bB);//bodies[i];\n                if ( body.m_type === b2Body.b2_dynamicBody ) {\nfor (/** @type {b2ContactEdge} */ var ce = body.m_contactList; ce; ce = ce.next) {\n    if ( island.m_bodyCount === island.m_bodyCapacity ) {\n        break;\n    }\n\n    if ( island.m_contactCount === island.m_contactCapacity ) {\n        break;\n    }\n\n    /** @type {b2Contact} */ var contact = ce.contact;\n\n    // Has this contact already been added to the island?\n    if ( contact.m_flag_islandFlag ) {\n        continue;\n    }\n\n    // Only add static, kinematic, or bullet bodies.\n    /** @type {b2Body} */ var other = ce.other;\n    if ( other.m_type === b2Body.b2_dynamicBody && !body.isBullet() && !other.isBullet() ) {\n        continue;\n    }\n\n    // Skip sensors.\n    /** @type {boolean} */ var sensorA = contact.m_fixtureA.m_isSensor;\n    /** @type {boolean} */ var sensorB = contact.m_fixtureB.m_isSensor;\n    if ( sensorA || sensorB ) {\n        continue;\n    }\n\n    // Tentatively advance the body to the TOI.\n    /** @type {b2Sweep} */ var backup = b2World._B2SWEEP_POOL0.copy( other.m_sweep );\n    if ( !other.m_flag_islandFlag ) {\n        other.advance( minAlpha );\n    }\n\n    // Update the contact points\n    contact.update( this.m_contactManager.m_contactListener );\n\n    // Was the contact disabled by the user?\n    if ( !contact.isEnabled() ) {\n        other.m_sweep.copy( backup );\n        other.synchronizeTransform();\n        continue;\n    }\n\n    // Are there contact points?\n    if ( !contact.isTouching() ) {\n        other.m_sweep.copy( backup );\n        other.synchronizeTransform();\n        continue;\n    }\n\n    // Add the contact to the island\n    contact.m_flag_islandFlag = true;\n    island.addContact( contact );\n\n    // Has the other body already been added to the island?\n    if ( other.m_flag_islandFlag ) {\n        continue;\n    }\n\n    // Add the other body to the island.\n    other.m_flag_islandFlag = true;\n\n    if ( other.m_type !== b2Body.b2_staticBody ) {\n        other.setAwake( true );\n    }\n\n    island.addBody( other );\n}\n                }\n            }\n\n            /** @type {b2TimeStep} */ var subStep = b2World.B2TIMESTEP_SUB_POOL0;\n            subStep.dt = (1 - minAlpha) * step.dt;\n            subStep.inv_dt = 1 / subStep.dt;\n            subStep.dtRatio = 1;\n            subStep.positionIterations = step.positionIterations;\n            subStep.velocityIterations = step.velocityIterations;",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1320"
        },
        {
            "message": "Missing item type\n// If new fixtures were added, we need to find the new contacts.\n        if ( this.m_flag_newFixture ) {\n            this.m_contactManager.findNewContacts();\n            this.m_flag_newFixture = false;\n        }\nthis.m_flag_locked = true;\n/** @type {b2TimeStep} */ var step = b2World._B2TIMESTEP_POOL0;\n        step.dt = deltaTime;\n        step.velocityIterations = velocityIterations;\n        step.positionIterations = positionIterations;",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1544"
        },
        {
            "message": "Missing item type\nthis.m_contactManager.collide();\nthis.m_profile.collide = timer.getMilliseconds();\n        }\n\n        // Integrate velocities, solve velocity constraints, and integrate positions.\n        if ( this.m_stepComplete && step.dt > 0.0 ) {\ntimer = new b2Timer();",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1574"
        },
        {
            "message": "Missing item type\n/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1643"
        },
        {
            "message": "Missing item type\nif ( callback instanceof b2QueryCallback ) {\n    return callback.reportFixture( fixture );\n}\nelse if (typeof(callback) === 'function')\n{\n    return callback( fixture );\n}\n        };\n\n        broadPhase.query( WorldQueryAABBWrapper, aabb );",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1655"
        },
        {
            "message": "Missing item type\n/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1692"
        },
        {
            "message": "Missing item type\nif ( b2Collision.testOverlapShape( shape, 0, fixture.getShape(), 0, transform, fixture.getBody().getTransform() ) ) {\n    if ( callback instanceof b2QueryCallback ) {\n        return callback.reportFixture( fixture );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture );\n    }\n}\nreturn true;\n        };\n\n        childIndex = childIndex || 0;\n        /** @type {b2AABB} */ var aabb = b2World._B2AABB_POOL0;\n        shape.computeAABB( aabb, transform, childIndex );\n        broadPhase.query( WorldQueryShapeWrapper, aabb );",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1705"
        },
        {
            "message": "Missing item type\n/**\n         * @return {boolean}\n         * @param {b2TreeNode} proxy",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1742"
        },
        {
            "message": "Missing item type\nif ( fixture.testPoint( point ) ) {\n    if ( callback instanceof b2QueryCallback ) {\n        return callback.reportFixture( fixture );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture );\n    }\n}\nreturn true;\n        };\n\n        slop = (typeof(slop) === 'number') ? (slop) : (b2Settings.b2_linearSlop);\n        /** @type {b2AABB} */ var aabb = b2World._B2AABB_POOL0;\n        aabb.lowerBound.set( point.x - slop, point.y - slop );\n        aabb.upperBound.set( point.x + slop, point.y + slop );\n        broadPhase.query( WorldQueryWrapper, aabb );",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1755"
        },
        {
            "message": "Missing item type\n/**\n         * @return {number}\n         * @param {b2RayCastInput} input\n         * @param {b2TreeNode} proxy",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1798"
        },
        {
            "message": "Missing item type\n/** @type {number} */ var index = fixture_proxy.childIndex;\n/** @type {b2RayCastOutput} */ var output = b2World._B2RAYCAST_OUTPUT_POOL0;\n/** @type {boolean} */ var hit = fixture.rayCast( output, input, index );\n\nif ( hit ) {\n    /** @type {number} */ var fraction = output.fraction;\n    /** @type {b2Vec2} */ var point = b2World._B2VEC2_POOL0;\n    point.set( (1 - fraction) * point1.x + fraction * point2.x, (1 - fraction) * point1.y + fraction * point2.y );\n\n    if ( callback instanceof b2RayCastCallback ) {\n        return callback.reportFixture( fixture, point, output.normal, fraction );\n    }\n    else if (typeof(callback) === 'function')\n    {\n        return callback( fixture, point, output.normal, fraction );\n    }\n}\nreturn input.maxFraction;\n        };\n\n        /** @type {b2RayCastInput} */ var input = b2World._B2RAYCAST_INPUT_POOL0;\n        input.maxFraction = 1;\n        input.p1.copy( point1 );\n        input.p2.copy( point2 );\n        broadPhase.rayCast( WorldRayCastWrapper, input );",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1812"
        },
        {
            "message": "Missing item type\n/** @type {number} */ var min_fraction = 1;\n\n/**\n * @private\n * @method  worldRayCastOneWrapper\n * @param {b2Fixture} fixture\n * @param {b2Vec2} point\n * @param {b2Vec2} normal\n * @param {number} fraction\n * @return {number}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1859"
        },
        {
            "message": "Missing item type\nswitch (shape.m_type) {\n            case b2Shape.e_circleShape:\n            {\n                /** @type {b2CircleShape} */ var circle = shape instanceof b2CircleShape ? shape : null;\n        /** @type {b2Vec2} */ var center = b2Transform.timesV2( transform, circle.m_p, b2World._B2VEC2_POOL0 );\n                /** @type {number} */ var radius = circle.m_radius;\n                /** @type {b2Vec2} */ var axis = b2Vec2._UNITX;\n        this.m_debugDraw.drawSolidCircle( center, radius, axis, color );\n            }\n                break;\n    case b2Shape.e_edgeShape:\n            {\n                /** @type {b2EdgeShape} */ var edge = shape instanceof b2EdgeShape ? shape : null;\n                /** @type {b2Vec2} */ var v1 = b2Transform.timesV2( transform, edge.m_vertex1, b2World._B2VEC2_POOL0 );\n                /** @type {b2Vec2} */ var v2 = b2Transform.timesV2( transform, edge.m_vertex2, b2World._B2VEC2_POOL1 );\n                ///** @type {b2Vec2} */ var v1 = edge.m_vertex1;\n                ///** @type {b2Vec2} */ var v2 = edge.m_vertex2;\n                this.m_debugDraw.drawSegment( v1, v2, color );\n            }\n                break;\n    case b2Shape.e_chainShape:\n            {\n                /** @type {b2ChainShape} */ var chain = shape instanceof b2ChainShape ? shape : null;\n                /** @type {number} */ var count = chain.m_count;\n                /** Array.<b2Vec2> */var vertices = chain.m_vertices;\n        /** Array.<b2Vec2> */var v1 = b2Transform.timesV2( transform, vertices[0], b2World._B2VEC2_POOL0 );\n                /** b2Vec2 */var v2 = b2World._B2VEC2_POOL1;\n                this.m_debugDraw.drawCircle( v1, 0.05, color );\n                for (/** @type {number} */ var i = 1; i < count; ++i) {\n                    /** b2Vec2 */v2.equals( b2Transform.timesV2( transform, vertices[i] ) );\n                    this.m_debugDraw.drawSegment( v1, v2, color );\n                    this.m_debugDraw.drawCircle( v2, 0.05, color );\n                    v1.equals( v2 );\n                }\n            }\n                break;\n    case b2Shape.e_polygonShape:\n            {\n                /** @type {b2PolygonShape} */ var poly = shape instanceof b2PolygonShape ? shape : null;\n                /** @type {number} */ var vertexCount = poly.m_count;\n                /** @type {Array.<b2Vec2>} */var localVertices = poly.m_vertices;\n                /** @type {Array.<b2Vec2>} */var vertices = b2World._B2VEC2_VECTOR_MAX_POLYGON_VERTICES;\n        for (i = 0; i < vertexCount; ++i) {\n                    vertices[i].equals( b2Transform.timesV2( transform, localVertices[i] ) );\n                }\n                this.m_debugDraw.drawSolidPolygon( vertices, vertexCount, color );\n            }\n                break;\n        }\n    };\n\n    /**\n     * @public\n     * @method  drawJoint\n     * @param   {b2Joint} joint\n     * @return  {void}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1925"
        },
        {
            "message": "Missing item type\n/** @type {b2Body} */ var bodyB = joint.getBodyB();\n/** @type {b2Transform} */ var xf1 = bodyA.m_xf;\n/** @type {b2Transform} */ var xf2 = bodyB.m_xf;\n/** @type {b2Vec2} */ var x1 = xf1.p;\n/** @type {b2Vec2} */ var x2 = xf2.p;\n/** @type {b2Vec2} */ var p1 = joint.getAnchorA( b2World._B2VEC2_POOL0 );\n/** @type {b2Vec2} */ var p2 = joint.getAnchorB( b2World._B2VEC2_POOL1 );\n\n/** @type {b2Color} */ var color = b2World._B2COLOR_POOL0;\ncolor.setRGBA( 0.5, 0.8, 0.8 );\n\nswitch (joint.m_type) {\n    case b2Joint.e_distanceJoint:\n        this.m_debugDraw.drawSegment( p1, p2, color );\n        break;\n\n    case b2Joint.e_pulleyJoint:{\n        /** @type {b2PulleyJoint} */ var pulley = joint instanceof b2PulleyJoint ? joint : null;\n        /** @type {b2Vec2} */ var s1 = pulley.getGroundAnchorA( b2World._B2VEC2_POOL2 );\n        /** @type {b2Vec2} */ var s2 = pulley.getGroundAnchorB( b2World._B2VEC2_POOL3 );\n        this.m_debugDraw.drawSegment( s1, p1, color );\n        this.m_debugDraw.drawSegment( s2, p2, color );\n        this.m_debugDraw.drawSegment( s1, s2, color );\n    }\n        break;\n\n    case b2Joint.e_mouseJoint:\n        // don't draw this\n        this.m_debugDraw.drawSegment( p1, p2, color );\n        break;\n\n    default:\n        if ( bodyA != this.m_groundBody ) {\n            this.m_debugDraw.drawSegment( x1, p1, color );\n        }\n\n        this.m_debugDraw.drawSegment( p1, p2, color );\n\n        if ( bodyB != this.m_groundBody ) {\n            this.m_debugDraw.drawSegment( x2, p2, color );\n        }\n};\n    };",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:1992"
        },
        {
            "message": "Missing item type\n/** @type {b2Color} */ var color = b2World._B2COLOR_POOL0;\n\nif ( flags & b2Draw.e_shapeBit ) {\n    for (/** @type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n        /** @type {b2Transform} */ var xf = b.m_xf;\n\n        for (/** @type {b2Fixture} */ var f = b.getFixtureList(); f; f = f.m_next) {\n            if ( !b.isActive() ) {\n                color.setRGBA( 0.5, 0.5, 0.3 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( b.getType() === b2Body.b2_staticBody ) {\n                color.setRGBA( 0.5, 0.9, 0.5 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( b.getType() === b2Body.b2_kinematicBody ) {\n                color.setRGBA( 0.5, 0.5, 0.9 );\n                this.drawShape( f, xf, color );\n            }\n            else if ( !b.isAwake() ) {\n                color.setRGBA( 0.6, 0.6, 0.6 );\n                this.drawShape( f, xf, color );\n            }\n            else {\n                color.setRGBA( 0.9, 0.7, 0.7 );\n                this.drawShape( f, xf, color );\n            }\n        }\n    }\n}",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:2073"
        },
        {
            "message": "Missing item type\n/** @type {Array.<b2Vec2>} */ var vs = b2World._B2VEC2_VECTOR_4;\n\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {\n    if ( !b.isActive() ) {\n        continue;\n    }\n\n    for (/* type {b2Fixture} */ var f = b.getFixtureList(); f; f = f.m_next) {\n        for (/** @type {number} */ var i = 0; i < f.m_proxyCount; ++i) {\n            /** @type {b2FixtureProxy} */ var proxy = f.m_proxies[i];\n\n            /** @type {b2AABB} */ var aabb = bp.getFatAABB( proxy.proxy );\n            vs[0].set( aabb.lowerBound.x, aabb.lowerBound.y );\n            vs[1].set( aabb.upperBound.x, aabb.lowerBound.y );\n            vs[2].set( aabb.upperBound.x, aabb.upperBound.y );\n            vs[3].set( aabb.lowerBound.x, aabb.upperBound.y );\n\n            this.m_debugDraw.drawPolygon( vs, 4, color );\n        }\n    }\n}\n        }\n\n        if ( flags & b2Draw.e_centerOfMassBit ) {\nfor (/* type {b2Body} */ var b = this.m_bodyList; b; b = b.m_next) {",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:2137"
        },
        {
            "message": "Missing item type\nfor ( ; system !== null; system = system.m_next) {\n    smallestRadius = Math.min( smallestRadius, system.getRadius() );\n}\nreturn smallestRadius;\n        }\n\n        // Use the smallest radius, since that represents the worst-case.\n        return b2Particle.b2CalculateParticleIterations( this.m_gravity.length(), GetSmallestRadius( this ), timeStep );\n    };",
            "line": " ..\\src_partial_docs\\addBox2D\\Dynamics\\b2World.js:2218"
        }
    ]
}